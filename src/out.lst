001   0000             ; variable rate sample player Z80 driver
002   0000             ; it can play a sample (8 bit signed) from 8 Khz up to 32 Khz rate
003   0000             ; Stéphane Dallongeville @2011
004   0000             ;
005   0000             ; Z80 clock is 3.547 Mhz on PAL and 3.575 on NTSC
006   0000             ;
007   0000             ; we always take pessimist case
008   0000             ;
009   0000             ; 32000 Hz : 110 cycles per sample
010   0000             ; 22050 Hz : 161 cycles per sample
011   0000             ; 16000 Hz : 221 cycles per sample
012   0000             ; 13400 Hz : 264 cycles per sample
013   0000             ; 11025 Hz : 321 cycles per sample
014   0000             ;  8000 Hz : 443 cycles per sample
015   0000             ;
016   0000             ; so we have to do 110 cycles per sample output which consist of :
017   0000             ; - read 2 samples from ROM and copy it to a temp buffer in RAM (~48 cycles)
018   0000             ; - output the obtained sample to the DAC (30 cycles)
019   0000             ; - handle wait for sample rate (18 cycles at least)
020   0000             ; - handle loop (14 cycles)
021   0000             ;
022   0000             ; register usage :
023   0000             ; SP  = sample source (in ROM)
024   0000             ; HL  = mix buffer
025   0000             ; B   = rate
026   0000             ; HL' = YMPORT0
027   0000             ; BC' = read buffer
028   0000             ; D'  = $80 (used for sample unsign)
029   0000             
030   0000             
031   0000             ; ###########################      define      ##############################
032   0000             
033   0000                         INCLUDE "z80_def.i80"   ; basic definitions
001+  0000             ; ############################ define ##############################
002+  0000             
003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
007+  0000             PSGPORT     EQU     $7F11           ; PSG port
008+  0000             BANKREG     EQU     $6000           ; bank register
009+  0000             
010+  0000             COMPLAY_SFT EQU     0               ; start play command
011+  0000             COMSTOP_SFT EQU     4               ; stop play command
012+  0000             
013+  0000             STATPLAY_SFT  EQU   0               ; playing status
014+  0000             STATREADY_SFT EQU   7               ; driver ready status
015+  0000             
016+  0000             CH0_SFT     EQU     0               ; channel 0
017+  0000             CH1_SFT     EQU     1               ; channel 1
018+  0000             CH2_SFT     EQU     2               ; channel 2
019+  0000             CH3_SFT     EQU     3               ; channel 3
020+  0000             
021+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
022+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
023+  0000             
024+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
025+  0000             STATREADY   EQU     1<<STATREADY_SFT
026+  0000             
027+  0000             CH0         EQU     1<<CH0_SFT
028+  0000             CH1         EQU     1<<CH1_SFT
029+  0000             CH2         EQU     1<<CH2_SFT
030+  0000             CH3         EQU     1<<CH3_SFT
031+  0000             
032+  0000             
033+  0000             ; ########################### variable #############################
034+  0000             
035+  0000             COMMAND     EQU     $0100           ; command from 68K
036+  0000             STATUS      EQU     $0102           ; status from Z80
037+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
034   0000             
035   0000             
036   0000             ; ###########################       var        ##############################
037   0000             
038   0000             WAVADR      EQU     PARAMS+$00      ; WAV address (bit 8 --> bit 23)
039   0000             WAVLEN      EQU     PARAMS+$02      ; WAV lenght (bit 8 --> bit 23)
040   0000             RATE        EQU     PARAMS+$04      ; rate (0=32000, 1=22050, 2=16000, 3=13400, 4=11025, 5=8000)
041   0000             PAN         EQU     PARAMS+$06      ; panning
042   0000             
043   0000             IWAVADR     EQU     PARAMS+$10      ; internal WAV address (bit 8 --> bit 23)
044   0000             IWAVLEN     EQU     PARAMS+$12      ; internal WAV lenght (bit 8 --> bit 23)
045   0000             
046   0000             NULLWAVADR  EQU     PARAMS+$20      ; silent WAV adr
047   0000             NULLWAVLEN  EQU     PARAMS+$22      ; silent WAV len
048   0000             
049   0000             WRITEBUF    EQU     PARAMS+$24
050   0000             READBUF     EQU     PARAMS+$26
051   0000             
052   0000             WAVBUFFER0  EQU     $1E00           ; WAV buffer 0
053   0000             WAVBUFFER1  EQU     $1F00           ; WAV buffer 1
054   0000             
055   0000             
056   0000             ; ###########################      macro       ##############################
057   0000             
058   0000                         INCLUDE "z80_mac.i80"  ; basic macros
001+  0000             ; ############################     macro     ##############################
002+  0000             
003+  0000             ; setBankFast
004+  0000             ; -----------
005+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
006+  0000             ; HL  <-  BANKREG
007+  0000             ;
008+  0000             ; set the bank register for ROM area
009+  0000             ; = 97 cycles
010+  0000             
011+  0000                         macro   setBankFast
012+  0000~            
013+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
014+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
015+  0000~                        RRA                     ;                           ' 4
016+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
017+  0000~                        RRA                     ;                           ' 4
018+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
019+  0000~                        RRA                     ;                           ' 4
020+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
021+  0000~                        RRA                     ;                           ' 4
022+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
023+  0000~                        RRA                     ;                           ' 4
024+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
025+  0000~                        RRA                     ;                           ' 4
026+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
027+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
028+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
029+  0000~            
030+  0000                         endm                    ;                           ' 97
031+  0000             
032+  0000             
033+  0000             ; writeYM
034+  0000             ; -------
035+  0000             ; HL   -> YM port where to write
036+  0000             ; D    -> address
037+  0000             ; E    -> value
038+  0000             ;
039+  0000             ; write to YM2612
040+  0000             
041+  0000                         macro   writeYM
042+  0000~            
043+  0000~            .wait0
044+  0000~                        BIT     7, (HL)         ; test YM not busy
045+  0000~                        JR      NZ, .wait0
046+  0000~                        LD      (HL), D         ; write address
047+  0000~            .wait1
048+  0000~                        BIT     7, (HL)         ; test YM not busy
049+  0000~                        JR      NZ, .wait1
050+  0000~                        INC     L
051+  0000~                        LD      (HL), E         ; write value
052+  0000~            
053+  0000                         endm
054+  0000             
055+  0000             
056+  0000             ; getPlayCommand
057+  0000             ; --------------
058+  0000             ; HL  <-  point to COMMAND
059+  0000             ; zf  <-  channel 'ch' play command
060+  0000             ;
061+  0000             ; Z flag reset if play command for channel 'ch'
062+  0000             ; = 22 cycles
063+  0000             
064+  0000                         macro   getPlayCommand ch
065+  0000~            
066+  0000~                        LD      HL, COMMAND             ;                   ' 10
067+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
068+  0000~            
069+  0000                         endm                            ;                   ' 22
070+  0000             
071+  0000             
072+  0000             ; getStopCommand
073+  0000             ; --------------
074+  0000             ; HL  <-  point to COMMAND
075+  0000             ; zf  <-  channel 'ch' stop command
076+  0000             ;
077+  0000             ; Z flag reset if stop command for channel 'ch'
078+  0000             ; = 22 cycles
079+  0000             
080+  0000                         macro   getStopCommand ch
081+  0000~            
082+  0000~                        LD      HL, COMMAND             ;                   ' 10
083+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
084+  0000~            
085+  0000                         endm                            ;                   ' 22
086+  0000             
087+  0000             
088+  0000             ; setPlayCommand
089+  0000             ; ----------------
090+  0000             ; HL  <-  point to COMMAND
091+  0000             ;
092+  0000             ; set the play command for channel 'ch'
093+  0000             ; = 25 cycles
094+  0000             
095+  0000                         macro   setPlayCommand ch
096+  0000~            
097+  0000~                        LD      HL, COMMAND             ;                   ' 10
098+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
099+  0000~            
100+  0000                         endm                            ;                   ' 25
101+  0000             
102+  0000             
103+  0000             ; setStopCommand
104+  0000             ; ----------------
105+  0000             ; HL  <-  point to COMMAND
106+  0000             ;
107+  0000             ; set the stop command for channel 'ch'
108+  0000             ; = 25 cycles
109+  0000             
110+  0000                         macro   setStopCommand ch
111+  0000~            
112+  0000~                        LD      HL, COMMAND             ;                   ' 10
113+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
114+  0000~            
115+  0000                         endm                            ;                   ' 25
116+  0000             
117+  0000             
118+  0000             ; clearPlayCommand
119+  0000             ; ----------------
120+  0000             ; HL  <-  point to COMMAND
121+  0000             ;
122+  0000             ; clear the play command for channel 'ch'
123+  0000             ; = 25 cycles
124+  0000             
125+  0000                         macro   clearPlayCommand ch
126+  0000~            
127+  0000~                        LD      HL, COMMAND             ;                   ' 10
128+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
129+  0000~            
130+  0000                         endm                            ;                   ' 25
131+  0000             
132+  0000             
133+  0000             ; clearStopCommand
134+  0000             ; ----------------
135+  0000             ; HL  <-  point to COMMAND
136+  0000             ;
137+  0000             ; clear the stop command for channel 'ch'
138+  0000             ; = 25 cycles
139+  0000             
140+  0000                         macro   clearStopCommand ch
141+  0000~            
142+  0000~                        LD      HL, COMMAND             ;                   ' 10
143+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
144+  0000~            
145+  0000                         endm                            ;                   ' 25
146+  0000             
147+  0000             
148+  0000             ; getPlayStatus
149+  0000             ; -------------
150+  0000             ; HL  <- point to STATUS
151+  0000             ; zf  <-  channel 'ch' is playing
152+  0000             ;
153+  0000             ; Z flag reset if play status for channel 'ch'
154+  0000             ; = 22 cycles
155+  0000             
156+  0000                         macro   getPlayStatus ch
157+  0000~            
158+  0000~                        LD      HL, STATUS              ;                   ' 10
159+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
160+  0000~            
161+  0000                         endm                            ;                   ' 22
162+  0000             
163+  0000             
164+  0000             ; setPlayStatus
165+  0000             ; -------------
166+  0000             ; HL  <- point to STATUS
167+  0000             ;
168+  0000             ; set the play status for channel 'ch'
169+  0000             ; = 25 cycles
170+  0000             
171+  0000                         macro   setPlayStatus ch
172+  0000~            
173+  0000~                        LD      HL, STATUS              ;                   ' 10
174+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
175+  0000~            
176+  0000                         endm                            ;                   ' 25
177+  0000             
178+  0000             
179+  0000             ; clearPlayStatus
180+  0000             ; -----------
181+  0000             ; HL  <- point to STATUS
182+  0000             ;
183+  0000             ; clear play status for channel 'ch'
184+  0000             ; = 25 cycles
185+  0000             
186+  0000                         macro   clearPlayStatus ch
187+  0000~            
188+  0000~                        LD      HL, STATUS              ;                   ' 10
189+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
190+  0000~            
191+  0000                         endm                            ;                   ' 25
192+  0000             
193+  0000             
194+  0000             ; getLoopStatus
195+  0000             ; -------------
196+  0000             ; HL  <- point to STATUS+1
197+  0000             ; zf  <-  channel 'ch' is playing
198+  0000             ;
199+  0000             ; Z flag reset if loop status for channel 'ch'
200+  0000             ; = 22 cycles
201+  0000             
202+  0000                         macro   getLoopStatus ch
203+  0000~            
204+  0000~                        LD      HL, STATUS+1            ;                   ' 10
205+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
206+  0000~            
207+  0000                         endm                            ;                   ' 22
208+  0000             
209+  0000             
210+  0000             ; setLoopStatus
211+  0000             ; -------------
212+  0000             ; HL  <- point to STATUS+1
213+  0000             ;
214+  0000             ; set the loop status for channel 'ch'
215+  0000             ; = 25 cycles
216+  0000             
217+  0000                         macro   setLoopStatus ch
218+  0000~            
219+  0000~                        LD      HL, STATUS+1            ;                   ' 10
220+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
221+  0000~            
222+  0000                         endm                            ;                   ' 25
223+  0000             
224+  0000             
225+  0000             ; clearLoopStatus
226+  0000             ; -----------
227+  0000             ; HL  <- point to STATUS+1
228+  0000             ;
229+  0000             ; clear loop status for channel 'ch'
230+  0000             ; = 25 cycles
231+  0000             
232+  0000                         macro   clearLoopStatus ch
233+  0000~            
234+  0000~                        LD      HL, STATUS+1            ;                   ' 10
235+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
236+  0000~            
237+  0000                         endm                            ;                   ' 25
238+  0000             
239+  0000             
240+  0000             ; ############################  macro wait macro  ##############################
241+  0000             
242+  0000             ; wait14x7
243+  0000             ; --------
244+  0000             ; wait for ((w * 14) + 7) cycles
245+  0000             ;
246+  0000                         macro   wait14x7 w
247+  0000~            
248+  0000~                        LD      A, w            ; 7
249+  0000~            .loop
250+  0000~                        DEC     A               ; 4
251+  0000~                        JP      NZ, .loop       ; 10
252+  0000~            
253+  0000                         endm
254+  0000             
255+  0000             
256+  0000                         macro   wait4
257+  0000~                        NOP
258+  0000                         endm
259+  0000             
260+  0000                         macro   wait6
261+  0000~                        INC     DE
262+  0000                         endm
263+  0000             
264+  0000                         macro   wait7
265+  0000~                        OR      $0
266+  0000                         endm
267+  0000             
268+  0000                         macro   wait8
269+  0000~                        wait4
270+  0000~                        wait4
271+  0000                         endm
272+  0000             
273+  0000                         macro   wait9
274+  0000~                        LD      A, R
275+  0000                         endm
276+  0000             
277+  0000                         macro   wait10
278+  0000~                        INC     IY
279+  0000                         endm
280+  0000             
281+  0000                         macro   wait11
282+  0000~                        wait7
283+  0000~                        wait4
284+  0000                         endm
285+  0000             
286+  0000                         macro   wait12
287+  0000~                        wait8
288+  0000~                        wait4
289+  0000                         endm
290+  0000             
291+  0000                         macro   wait13
292+  0000~                        wait9
293+  0000~                        wait4
294+  0000                         endm
295+  0000             
296+  0000                         macro   wait14
297+  0000~                        wait10
298+  0000~                        wait4
299+  0000                         endm
300+  0000             
301+  0000                         macro   wait15
302+  0000~                        wait8
303+  0000~                        wait7
304+  0000                         endm
305+  0000             
306+  0000                         macro   wait16
307+  0000~                        wait12
308+  0000~                        wait4
309+  0000                         endm
310+  0000             
311+  0000                         macro   wait17
312+  0000~                        wait10
313+  0000~                        wait7
314+  0000                         endm
315+  0000             
316+  0000                         macro   wait18
317+  0000~                        wait14
318+  0000~                        wait4
319+  0000                         endm
320+  0000             
321+  0000                         macro   wait19
322+  0000~                        wait12
323+  0000~                        wait7
324+  0000                         endm
325+  0000             
326+  0000                         macro   wait20
327+  0000~                        wait16
328+  0000~                        wait4
329+  0000                         endm
330+  0000             
331+  0000                         macro   wait21
332+  0000~                        wait14x7 1
333+  0000                         endm
334+  0000             
335+  0000                         macro   wait22
336+  0000~                        wait18
337+  0000~                        wait4
338+  0000                         endm
339+  0000             
340+  0000                         macro   wait23
341+  0000~                        wait16
342+  0000~                        wait7
343+  0000                         endm
344+  0000             
345+  0000                         macro   wait24
346+  0000~                        wait20
347+  0000~                        wait4
348+  0000                         endm
349+  0000             
350+  0000                         macro   wait25
351+  0000~                        wait21
352+  0000~                        wait4
353+  0000                         endm
354+  0000             
355+  0000                         macro   wait26
356+  0000~                        wait22
357+  0000~                        wait4
358+  0000                         endm
359+  0000             
360+  0000                         macro   wait27
361+  0000~                        wait20
362+  0000~                        wait7
363+  0000                         endm
364+  0000             
365+  0000                         macro   wait28
366+  0000~                        wait21
367+  0000~                        wait7
368+  0000                         endm
369+  0000             
370+  0000                         macro   wait30
371+  0000~                        wait22
372+  0000~                        wait8
373+  0000                         endm
374+  0000             
375+  0000                         macro   wait31
376+  0000~                        wait21
377+  0000~                        wait10
378+  0000                         endm
379+  0000             
380+  0000                         macro   wait32
381+  0000~                        wait20
382+  0000~                        wait12
383+  0000                         endm
384+  0000             
385+  0000                         macro   wait33
386+  0000~                        wait21
387+  0000~                        wait12
388+  0000                         endm
389+  0000             
390+  0000                         macro   wait34
391+  0000~                        wait22
392+  0000~                        wait12
393+  0000                         endm
394+  0000             
395+  0000                         macro   wait35
396+  0000~                        wait14x7 2
397+  0000                         endm
398+  0000             
399+  0000                         macro   wait36
400+  0000~                        wait32
401+  0000~                        wait4
402+  0000                         endm
403+  0000             
404+  0000                         macro   wait37
405+  0000~                        wait21
406+  0000~                        wait16
407+  0000                         endm
408+  0000             
409+  0000                         macro   wait39
410+  0000~                        wait35
411+  0000~                        wait4
412+  0000                         endm
413+  0000             
414+  0000                         macro   wait38
415+  0000~                        wait21
416+  0000~                        wait17
417+  0000                         endm
418+  0000             
419+  0000                         macro   wait40
420+  0000~                        wait21
421+  0000~                        wait19
422+  0000                         endm
423+  0000             
424+  0000                         macro   wait41
425+  0000~                        wait21
426+  0000~                        wait20
427+  0000                         endm
428+  0000             
429+  0000                         macro   wait42
430+  0000~                        wait35
431+  0000~                        wait7
432+  0000                         endm
433+  0000             
434+  0000                         macro   wait43
435+  0000~                        wait35
436+  0000~                        wait8
437+  0000                         endm
438+  0000             
439+  0000                         macro   wait46
440+  0000~                        wait35
441+  0000~                        wait11
442+  0000                         endm
443+  0000             
444+  0000                         macro   wait47
445+  0000~                        wait35
446+  0000~                        wait12
447+  0000                         endm
448+  0000             
449+  0000                         macro   wait48
450+  0000~                        wait40
451+  0000~                        wait8
452+  0000                         endm
453+  0000             
454+  0000                         macro   wait49
455+  0000~                        wait14x7 3
456+  0000                         endm
457+  0000             
458+  0000                         macro   wait51
459+  0000~                        wait35
460+  0000~                        wait16
461+  0000                         endm
462+  0000             
463+  0000                         macro   wait52
464+  0000~                        wait36
465+  0000~                        wait16
466+  0000                         endm
467+  0000             
468+  0000                         macro   wait53
469+  0000~                        wait49
470+  0000~                        wait4
471+  0000                         endm
472+  0000             
473+  0000                         macro   wait55
474+  0000~                        wait51
475+  0000~                        wait4
476+  0000                         endm
477+  0000             
478+  0000                         macro   wait56
479+  0000~                        wait49
480+  0000~                        wait7
481+  0000                         endm
482+  0000             
483+  0000                         macro   wait57
484+  0000~                        wait49
485+  0000~                        wait8
486+  0000                         endm
487+  0000             
488+  0000                         macro   wait59
489+  0000~                        wait49
490+  0000~                        wait10
491+  0000                         endm
492+  0000             
493+  0000                         macro   wait60
494+  0000~                        wait49
495+  0000~                        wait11
496+  0000                         endm
497+  0000             
498+  0000                         macro   wait62
499+  0000~                        wait49
500+  0000~                        wait13
501+  0000                         endm
502+  0000             
503+  0000                         macro   wait63
504+  0000~                        wait14x7 4
505+  0000                         endm
506+  0000             
507+  0000                         macro   wait64
508+  0000~                        wait49
509+  0000~                        wait15
510+  0000                         endm
511+  0000             
512+  0000                         macro   wait65
513+  0000~                        wait49
514+  0000~                        wait16
515+  0000                         endm
516+  0000             
517+  0000                         macro   wait66
518+  0000~                        wait49
519+  0000~                        wait17
520+  0000                         endm
521+  0000             
522+  0000                         macro   wait72
523+  0000~                        wait63
524+  0000~                        wait9
525+  0000                         endm
526+  0000             
527+  0000                         macro   wait75
528+  0000~                        wait63
529+  0000~                        wait12
530+  0000                         endm
531+  0000             
532+  0000                         macro   wait77
533+  0000~                        wait14x7 5
534+  0000                         endm
535+  0000             
536+  0000                         macro   wait79
537+  0000~                        wait63
538+  0000~                        wait16
539+  0000                         endm
540+  0000             
541+  0000                         macro   wait81
542+  0000~                        wait77
543+  0000~                        wait4
544+  0000                         endm
545+  0000             
546+  0000                         macro   wait82
547+  0000~                        wait63
548+  0000~                        wait19
549+  0000                         endm
550+  0000             
551+  0000                         macro   wait83
552+  0000~                        wait63
553+  0000~                        wait20
554+  0000                         endm
555+  0000             
556+  0000                         macro   wait84
557+  0000~                        wait77
558+  0000~                        wait7
559+  0000                         endm
560+  0000             
561+  0000                         macro   wait85
562+  0000~                        wait77
563+  0000~                        wait8
564+  0000                         endm
565+  0000             
566+  0000                         macro   wait86
567+  0000~                        wait77
568+  0000~                        wait9
569+  0000                         endm
570+  0000             
571+  0000                         macro   wait89
572+  0000~                        wait77
573+  0000~                        wait12
574+  0000                         endm
575+  0000             
576+  0000                         macro   wait91
577+  0000~                        wait14x7 6
578+  0000                         endm
579+  0000             
580+  0000                         macro   wait92
581+  0000~                        wait77
582+  0000~                        wait15
583+  0000                         endm
584+  0000             
585+  0000                         macro   wait96
586+  0000~                        wait77
587+  0000~                        wait19
588+  0000                         endm
589+  0000             
590+  0000                         macro   wait97
591+  0000~                        wait77
592+  0000~                        wait20
593+  0000                         endm
594+  0000             
595+  0000                         macro   wait99
596+  0000~                        wait91
597+  0000~                        wait8
598+  0000                         endm
599+  0000             
600+  0000                         macro   wait100
601+  0000~                        wait91
602+  0000~                        wait9
603+  0000                         endm
604+  0000             
605+  0000                         macro   wait104
606+  0000~                        wait91
607+  0000~                        wait13
608+  0000                         endm
609+  0000             
610+  0000                         macro   wait105
611+  0000~                        wait14x7 7
612+  0000                         endm
613+  0000             
614+  0000                         macro   wait106
615+  0000~                        wait91
616+  0000~                        wait15
617+  0000                         endm
618+  0000             
619+  0000                         macro   wait107
620+  0000~                        wait91
621+  0000~                        wait16
622+  0000                         endm
623+  0000             
624+  0000                         macro   wait111
625+  0000~                        wait91
626+  0000~                        wait20
627+  0000                         endm
628+  0000             
629+  0000                         macro   wait116
630+  0000~                        wait105
631+  0000~                        wait11
632+  0000                         endm
633+  0000             
634+  0000                         macro   wait117
635+  0000~                        wait105
636+  0000~                        wait12
637+  0000                         endm
638+  0000             
639+  0000                         macro   wait119
640+  0000~                        wait14x7 8
641+  0000                         endm
642+  0000             
643+  0000                         macro   wait121
644+  0000~                        wait117
645+  0000~                        wait4
646+  0000                         endm
647+  0000             
648+  0000                         macro   wait122
649+  0000~                        wait111
650+  0000~                        wait11
651+  0000                         endm
652+  0000             
653+  0000                         macro   wait123
654+  0000~                        wait119
655+  0000~                        wait4
656+  0000                         endm
657+  0000             
658+  0000                         macro   wait131
659+  0000~                        wait119
660+  0000~                        wait12
661+  0000                         endm
662+  0000             
663+  0000                         macro   wait132
664+  0000~                        wait119
665+  0000~                        wait13
666+  0000                         endm
667+  0000             
668+  0000                         macro   wait133
669+  0000~                        wait14x7 9
670+  0000                         endm
671+  0000             
672+  0000                         macro   wait136
673+  0000~                        wait119
674+  0000~                        wait17
675+  0000                         endm
676+  0000             
677+  0000                         macro   wait141
678+  0000~                        wait133
679+  0000~                        wait8
680+  0000                         endm
681+  0000             
682+  0000                         macro   wait175
683+  0000~                        wait14x7 12
684+  0000                         endm
685+  0000             
686+  0000                         macro   wait182
687+  0000~                        wait175
688+  0000~                        wait7
689+  0000                         endm
690+  0000             
691+  0000                         macro   wait183
692+  0000~                        wait175
693+  0000~                        wait8
694+  0000                         endm
695+  0000             
696+  0000                         macro   wait187
697+  0000~                        wait175
698+  0000~                        wait12
699+  0000                         endm
700+  0000             
701+  0000                         macro   wait189
702+  0000~                        wait14x7 13
703+  0000                         endm
704+  0000             
705+  0000                         macro   wait193
706+  0000~                        wait189
707+  0000~                        wait4
708+  0000                         endm
709+  0000             
710+  0000                         macro   wait197
711+  0000~                        wait189
712+  0000~                        wait8
713+  0000                         endm
059   0000             
060   0000             
061   0000             ; doWaitForRate
062   0000             ; -------------
063   0000             ; B    -> rate
064   0000             ; A   <-  ?
065   0000             ;
066   0000             ; wait the necessary number of cycle depending the sample rate
067   0000             ; = 18 --> 351 cycles
068   0000             
069   0000                         macro doWaitForRate
070   0000~            
071   0000~                        LD      A, B                    ;                   ' 4     |
072   0000~                        OR      A                       ;                   ' 4     | 18
073   0000~                        JP      Z, .end_wait            ;                   ' 10    |
074   0000~            
075   0000~                        wait30                          ;                   ' 30    |
076   0000~                        LD      A, B                    ;                   ' 4     | 51 (69)
077   0000~                        CP      A, 1                    ;                   ' 7     |
078   0000~                        JP      Z, .end_wait            ;                   ' 10    |
079   0000~            
080   0000~                        wait39                          ;                   ' 39    |
081   0000~                        LD      A, B                    ;                   ' 4     | 60 (129)
082   0000~                        CP      A, 2                    ;                   ' 7     |
083   0000~                        JP      Z, .end_wait            ;                   ' 10    |
084   0000~            
085   0000~                        wait22                          ;                   ' 22    |
086   0000~                        LD      A, B                    ;                   ' 4     | 43 (172)
087   0000~                        CP      A, 3                    ;                   ' 7     |
088   0000~                        JP      Z, .end_wait            ;                   ' 10    |
089   0000~            
090   0000~                        wait36                          ;                   ' 36    |
091   0000~                        LD      A, B                    ;                   ' 4     | 57 (229)
092   0000~                        CP      A, 4                    ;                   ' 7     |
093   0000~                        JP      Z, .end_wait            ;                   ' 10    |
094   0000~            
095   0000~                        wait122                         ;                   ' 122 (351)
096   0000~            
097   0000~            .end_wait
098   0000~            
099   0000                         endm                            ;                   ' 18 --> 351
100   0000             
101   0000             
102   0000             ; copyChannelParams
103   0000             ; -----------------
104   0000             ; copy channel parameters to internal structure
105   0000             ; = 64 cycles
106   0000             
107   0000                         macro copyChannelParams
108   0000~            
109   0000~                        LD      HL, (WAVADR)            ;                   ' 16
110   0000~                        LD      (IWAVADR), HL           ;                   ' 16
111   0000~                        LD      HL, (WAVLEN)            ;                   ' 16
112   0000~                        LD      (IWAVLEN), HL           ;                   ' 16
113   0000~            
114   0000                         endm                            ;                   ' 64
115   0000             
116   0000             ; setNullWav
117   0000             ; ----------
118   0000             ; set null sample play
119   0000             ; = 64 cycles
120   0000             
121   0000                         macro setNullWav
122   0000~            
123   0000~                        LD      HL, (NULLWAVADR)        ;                   ' 16
124   0000~                        LD      (IWAVADR), HL           ;                   ' 16
125   0000~                        LD      HL, (NULLWAVLEN)        ;                   ' 16
126   0000~                        LD      (IWAVLEN), HL           ;                   ' 16
127   0000~            
128   0000                         endm                            ;                   ' 64
129   0000             
130   0000             
131   0000             ; clearPlayAndLoopStatus
132   0000             ; ----------------------
133   0000             ; clear play and loop status flag
134   0000             ; = 50 cycles
135   0000             
136   0000                         macro clearPlayAndLoopStatus
137   0000~            
138   0000~                        clearPlayStatus 0               ; clear play status ' 25
139   0000~                        clearLoopStatus 0               ; clear loop status ' 25
140   0000~            
141   0000                         endm                            ;                   ' 50
142   0000             
143   0000             
144   0000             ; stopChannel
145   0000             ; -----------
146   0000             ; set null sample play
147   0000             ; = 114 cycles
148   0000             
149   0000                         macro stopChannel
150   0000~            
151   0000~                        setNullWav                      ;                   ' 64
152   0000~                        clearPlayAndLoopStatus          ;                   ' 50
153   0000~            
154   0000                         endm                            ;                   ' 114
155   0000             
156   0000             
157   0000             ; handlePlayCommandWhilePlay4
158   0000             ; ---------------------------
159   0000             ; HL  <-  ?
160   0000             ; DE  <-  ?
161   0000             ;
162   0000             ; handle play command while play 4 samples
163   0000             ; = 440 cycles
164   0000             
165   0000                         macro handlePlayCommandWhilePlay4
166   0000~            
167   0000~                        sampleOutputAndWait     ; (0*110)+0 --> perfect     ' 48 (48)
168   0000~            
169   0000~                        getPlayCommand 0            ; play command ?        ' 22    | 32 (80)
170   0000~                        JP      NZ, .do_command     ;                       ' 10    |
171   0000~            
172   0000~                        wait30                  ; synchro                   ' 30 (110)
173   0000~            
174   0000~                        sampleOutputAndWait     ; (1*110)+0 --> perfect     ' 48 (158)
175   0000~            
176   0000~                        wait62                  ; synchro                   ' 62 (220)
177   0000~            
178   0000~                        sampleOutputAndWait     ; (2*110)+0 --> perfect     ' 48 (268)
179   0000~            
180   0000~                        wait62                  ; synchro                   ' 62 (330)
181   0000~            
182   0000~                        sampleOutputAndWait     ; (3*110)+0 --> perfect     ' 48 (378)
183   0000~            
184   0000~                        wait52                  ;                           ' 52    | 62 (440)
185   0000~                        JP      .end            ;                           ' 10    |
186   0000~            
187   0000~            .do_command
188   0000~                        clearPlayCommand 0      ; clear play command        ' 25    | 29 (109)
189   0000~                        wait4                   ; synchro                   ' 4     |
190   0000~            
191   0000~                        sampleOutputAndWait     ; (1*110)-1 --> bit soon    ' 48 (157)
192   0000~            
193   0000~                        copyChannelParams       ; copy params               ' 64 (221)
194   0000~            
195   0000~                        sampleOutputAndWait     ; (2*110)+1 --> bit late    ' 48 (269)
196   0000~            
197   0000~                        setPlayStatus 0         ; set play status           ' 25    |
198   0000~                        LD      A, (RATE)       ; get rate value            ' 13    |
199   0000~                        LD      B, A            ; store in B                ' 4     | 59 (328)
200   0000~                        LD      A, (PAN)        ; set pan value             ' 13    |
201   0000~                        LD      C, A            ; store in C                ' 4     |
202   0000~            
203   0000~                        sampleOutputAndWait     ; (3*110)-2 --> soon        ' 48 (376)
204   0000~            
205   0000~                        LD      HL, YMPORT2     ; prepare panning           ' 10    |
206   0000~                        LD      (HL), $B6       ;                           ' 10    |
207   0000~                        INC     L               ;                           ' 4     |
208   0000~                        wait11                  ;                           ' 11    |
209   0000~                        LD      (HL), C         ; set pan value             ' 7     | 64 (440)
210   0000~                        DEC     L               ;                           ' 4     |
211   0000~                        DEC     L               ;                           ' 4     |
212   0000~                        DEC     L               ;                           ' 4     |
213   0000~                        LD      (HL), $2A       ; prepare DAC out           ' 10    |
214   0000~            
215   0000~            .end
216   0000                         endm                    ;                           ' 440
217   0000             
218   0000             
219   0000             ; prepareChannelWhilePlay4
220   0000             ; ------------------------
221   0000             ; SP  <-  point to the sample source
222   0000             ; HL  <-  point to write buffer
223   0000             ; A   <-  ?
224   0000             ; E   <-  ?
225   0000             ;
226   0000             ; set bank and prepare registers to play channel
227   0000             ; = 402 cycles
228   0000             
229   0000                         macro prepareChannelWhilePlay4
230   0000~            
231   0000~                        sampleOutputAndWait     ; (0*110)+0 --> perfect     ' 48 (48)
232   0000~            
233   0000~                        LD      HL, IWAVADR     ; point to sample adr       ' 10    |
234   0000~                        LD      E, (HL)         ; E = bit 8-15              ' 7     |
235   0000~                        LD      A, E            ; A = bit 8-15              ' 4     |
236   0000~                        INC     L               ;                           ' 4     | 40 (88)
237   0000~                        RLA                     ; C flag = bit 15           ' 4     |
238   0000~                        LD      A, (HL)         ; A = bit 16-23             ' 7     |
239   0000~                        RLA                     ; A = bit 15-22             ' 4     |
240   0000~            
241   0000~                        LD      HL, BANKREG     ; HL = BANKREG              ' 10    |
242   0000~                        EX      AF, AF'         ; save A                    ' 4     | 22 (110)
243   0000~                        wait8                   ; synchro                   ' 8     |
244   0000~            
245   0000~                        sampleOutputAndWait     ; (1*110)+0 --> perfect     ' 48 (158)
246   0000~            
247   0000~                        EX      AF, AF'         ; restore A                 ' 4     |
248   0000~                        LD      (HL), A         ; #1 (bit 15)               ' 7     |
249   0000~                        RRA                     ;                           ' 4     |
250   0000~                        LD      (HL), A         ; #2 (bit 16)               ' 7     |
251   0000~                        RRA                     ;                           ' 4     |
252   0000~                        LD      (HL), A         ; #3 (bit 17)               ' 7     | 63 (221)
253   0000~                        RRA                     ;                           ' 4     |
254   0000~                        LD      (HL), A         ; #4 (bit 18)               ' 7     |
255   0000~                        RRA                     ;                           ' 4     |
256   0000~                        LD      (HL), A         ; #5 (bit 19)               ' 7     |
257   0000~                        EX      AF, AF'         ; save A                    ' 4     |
258   0000~                        wait4                   ; synchro                   ' 4     |
259   0000~            
260   0000~                        sampleOutputAndWait     ; (2*110)+1 --> bit late    ' 48 (269)
261   0000~            
262   0000~                        EX      AF, AF'         ; restore A                 ' 4     |
263   0000~                        RRA                     ;                           ' 4     |
264   0000~                        LD      (HL), A         ; #6 (bit 20)               ' 7     |
265   0000~                        RRA                     ;                           ' 4     | 40 (309)
266   0000~                        LD      (HL), A         ; #7 (bit 21)               ' 7     |
267   0000~                        LD      (HL), L         ; #8 (bit 22 = 0)           ' 7     |
268   0000~                        LD      (HL), L         ; #9 (bit 23 = 0)           ' 7     |
269   0000~            
270   0000~                        LD      A, E            ; A = bit 8-15              ' 4     |
271   0000~                        OR      $80             ; A = $80 | bit 8-14        ' 7     |
272   0000~                        LD      H, A            ;                           ' 4     | 23 (332)
273   0000~                        XOR     A               ;                           ' 4     |
274   0000~                        LD      L, A            ; L = $00                   ' 4     |
275   0000~            
276   0000~                        sampleOutputAndWait     ; (3*110)+2 --> late        ' 48 (380)
277   0000~            
278   0000~                        LD      SP, HL          ; SP = sample src           ' 6     | 22 (402)
279   0000~                        LD      HL, (WRITEBUF)  ;                           ' 16    |
280   0000~            
281   0000                         endm                    ;                           ' 402
282   0000             
283   0000             
284   0000             ; updateChannelDataWhilePlay2
285   0000             ; ---------------------------
286   0000             ; HL  <-  ?
287   0000             ;
288   0000             ; update sample address and sample lenght
289   0000             ; = 180 cycles
290   0000             
291   0000                         macro updateChannelDataWhilePlay2
292   0000~            
293   0000~                        sampleOutputAndWait     ; (0*110)+0 --> perfect     ' 48 (48)
294   0000~            
295   0000~                        LD      HL, (IWAVADR)   ; increment address         ' 16    |
296   0000~                        INC     HL              ;                           ' 6     | 38 (86)
297   0000~                        LD      (IWAVADR), HL   ;                           ' 16    |
298   0000~            
299   0000~                        LD      HL, (IWAVLEN)   ; decrement lenght          ' 16    | 24 (110)
300   0000~                        wait8                   ; synchro                   ' 8     |
301   0000~            
302   0000~                        sampleOutputAndWait     ; (1*110)+0 --> perfect     ' 48 (158)
303   0000~            
304   0000~                        DEC     HL              ;                           ' 6     | 22
305   0000~                        LD      (IWAVLEN), HL   ;                           ' 16    | (180)
306   0000~            
307   0000                         endm                    ; 180
308   0000             
309   0000             ; checkChannelEndWhilePlay4
310   0000             ; -------------------------
311   0000             ; HL  <-  ?
312   0000             ; A   <-  ?
313   0000             ;
314   0000             ; check is sample is done, restart it if needed
315   0000             ; = 430 cycles
316   0000             
317   0000                         macro checkChannelEndWhilePlay4
318   0000~            
319   0000~                        sampleOutputAndWait     ; (0*110)+0 --> perfect     ' 48 (48)
320   0000~            
321   0000~                        LD      HL, (IWAVLEN)   ; get sample lenght         ' 16    |
322   0000~                        LD      A, H            ;                           ' 4     | 34 (82)
323   0000~                        OR      L               ;                           ' 4     |
324   0000~                        JP      Z, .done        ; sample done ?             ' 10    |
325   0000~            
326   0000~                        wait28                  ; synchro                   ' 28 (110)
327   0000~            
328   0000~                        sampleOutputAndWait     ; (1*110)+0 --> perfect     ' 48 (158)
329   0000~            
330   0000~                        wait62                  ; synchro                   ' 62 (220)
331   0000~            
332   0000~                        sampleOutputAndWait     ; (2*110)+0 --> perfect     ' 48 (268)
333   0000~            
334   0000~                        wait62                  ; synchro                   ' 62 (330)
335   0000~            
336   0000~                        sampleOutputAndWait     ; (3*110)+0 --> perfect     ' 48 (378)
337   0000~            
338   0000~                        wait42                  ;                           ' 42    | 52 (430)
339   0000~                        JP      .end            ;                           ' 10    |
340   0000~            
341   0000~            .done
342   0000~                        wait28                  ; synchro                   ' 28 (110)
343   0000~            
344   0000~                        sampleOutputAndWait     ; (1*110)+0 --> perfect     ' 48 (158)
345   0000~            
346   0000~                        getLoopStatus 0         ; loop play ?               ' 22    | 32 (190)
347   0000~                        JP      Z, .stop        ;                           ' 10    |
348   0000~            
349   0000~                        wait30                  ; synchro                   ' 30 (220)
350   0000~            
351   0000~                        sampleOutputAndWait     ; (2*110)+0 --> perfect     ' 48 (268)
352   0000~            
353   0000~                        copyChannelParams       ; recopy channel param      ' 64 (332)
354   0000~            
355   0000~                        sampleOutputAndWait     ; (3*110)+2 --> late        ' 48 (380)
356   0000~            
357   0000~                        wait40                  ;                           ' 40    | 50 (430)
358   0000~                        JP      .end            ;                           ' 10    |
359   0000~            
360   0000~            .stop
361   0000~                        wait30                  ; synchro                   ' 30 (220)
362   0000~            
363   0000~                        sampleOutputAndWait     ; (2*110)+0 --> perfect     ' 48 (268)
364   0000~            
365   0000~                        setNullWav              ;                           ' 64 (332)
366   0000~            
367   0000~                        sampleOutputAndWait     ; (3*110)+2 --> late        ' 48 (380)
368   0000~            
369   0000~                        clearPlayAndLoopStatus  ;                           ' 50 (430)
370   0000~            
371   0000~            .end
372   0000                         endm                    ;                           ' 430
373   0000             
374   0000             
375   0000             ; swapBufferWhilePlay2
376   0000             ; --------------------
377   0000             ; HL  <-  point to new write buffer
378   0000             ; DE  <-  point to new read buffer
379   0000             ;
380   0000             ; switch read and write buffer
381   0000             ; = 174 cycles
382   0000             
383   0000                         macro swapBufferWhilePlay2
384   0000~            
385   0000~                        sampleOutputAndWait     ; (0*110)+0 --> perfect     ' 48 (48)
386   0000~            
387   0000~                        LD      HL, (WRITEBUF)  ;                           ' 16    |
388   0000~                        LD      DE, (READBUF)   ;                           ' 20    | 62 (110)
389   0000~                        LD      (WRITEBUF), DE  ;                           ' 20    |
390   0000~                        wait6                   ; (can use it here)         ' 6     |
391   0000~            
392   0000~                        sampleOutputAndWait     ; (1*110)+0 --> perfect     ' 48 (158)
393   0000~            
394   0000~                        LD      (READBUF), HL   ;                           ' 16 (174)
395   0000~            
396   0000                         endm                    ;                           ' 174
397   0000             
398   0000             
399   0000             ; sampleOutput
400   0000             ; ------------
401   0000             ; HL'  -> YMPORT1
402   0000             ; BC' <-> point to play output buffer
403   0000             ; D'   -> $80
404   0000             ;
405   0000             ; output a sample to the DAC
406   0000             ; = 30 cycles
407   0000             
408   0000                         macro sampleOutput
409   0000~            
410   0000~                        EXX                     ;                           ' 4
411   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7
412   0000~                        ADD     D               ; unsign                    ' 4
413   0000~                        INC     C               ; increment with looping    ' 4
414   0000~                        LD      (HL), A         ; play sample               ' 7
415   0000~                        EXX                     ;                           ' 4
416   0000~            
417   0000                         endm                    ;                           ' 30
418   0000             
419   0000             
420   0000             ; sampleOutputAndWait
421   0000             ; -------------------
422   0000             ; HL'  -> YMPORT1
423   0000             ; BC' <-> point to play output buffer
424   0000             ; D'   -> $80
425   0000             ; B    -> rate
426   0000             ;
427   0000             ; output a sample to the DAC and wait for ajusting to current sample rate
428   0000             ; = 48 --> 381 cycles
429   0000             
430   0000                         macro sampleOutputAndWait
431   0000~            
432   0000~                        sampleOutput            ;                           ' 30
433   0000~                        doWaitForRate           ;                           ' 18 --> 351
434   0000~            
435   0000                         endm                    ;                           ' 48 --> 381
436   0000             
437   0000             
438   0000             ; readAndWrite2
439   0000             ; -------------
440   0000             ; SP  <-> point to the sample source (ROM)
441   0000             ; HL  <-> point to the write output buffer
442   0000             ; DE  <-  ?
443   0000             ;
444   0000             ; read 2 samples and write them in output buffer
445   0000             ; = 34 cycles
446   0000             
447   0000                         macro readAndWrite2
448   0000~            
449   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+2 (rom access latency)
450   0000~                        LD      (HL), E         ;                           ' 7
451   0000~                        INC     L               ;                           ' 4
452   0000~                        LD      (HL), D         ;                           ' 7
453   0000~                        INC     L               ;                           ' 4
454   0000~            
455   0000                         endm                    ;                           ' 34
456   0000             
457   0000             
458   0000             ; ###########################       init       ##############################
459   0000             
460   0000                         ORG     $0000
461   0000             
462   0000             init
463   0000 F3                      DI                      ; disable ints
464   0001 31 00 20                LD      SP, $2000       ; setup stack
465   0004 ED 56                   IM      $01             ; set int mode 1
466   0006 AF                      XOR     A
467   0007 32 02 01                LD      (STATUS), A     ; driver not ready
468   000A 32 00 01                LD      (COMMAND), A    ; command cleared
469   000D C3 00 02                JP      start           ; jump to start
470   0010             
471   0010             
472   0010             ; ###########################     interrupt    ##############################
473   0010             
474   0010 00                      BLOCK   $0038-$
475   0038             
476   0038             interrupt                           ; do nothing in this program
477   0038 ED 4D                   RETI
478   003A             
479   003A             
480   003A             ; ###########################       main       ##############################
481   003A             
482   003A 00                      BLOCK   $0200-$
483   0200             
484   0200             start
485   0200 21 04 01                LD      HL, PARAMS
486   0203 3E 00                   LD      A, $00
487   0205 06 20                   LD      B, $20
488   0207             
489   0207             cp_loop
490   0207 77                      LD      (HL), A         ; clear sample parameters
491   0208 23                      INC     HL
492   0209 10 FC                   DJNZ    cp_loop
493   020B             
494   020B 21 00 1E                LD      HL, WAVBUFFER0
495   020E 3E 00                   LD      A, $00
496   0210 06 00                   LD      B, $00          ; for 256 * 2 bytes to clear
497   0212             
498   0212             cb_loop
499   0212 77                      LD      (HL), A         ; initialize buffers to silent
500   0213 23                      INC     HL
501   0214 77                      LD      (HL), A
502   0215 23                      INC     HL
503   0216 10 FA                   DJNZ    cb_loop
504   0218             
505   0218 CD EA 0B                CALL    initDAC         ; prepare DAC for output
506   021B             
507   021B 21 00 1E                LD      HL, WAVBUFFER0  ; initialize write and read buffer
508   021E 22 28 01                LD      (WRITEBUF), HL
509   0221 21 00 1F                LD      HL, WAVBUFFER1
510   0224 22 2A 01                LD      (READBUF), HL
511   0227             
512   0227 44 4D                   LD      BC, HL          ; BC' point to read buffer
513   0229 16 80                   LD      D, $80          ; D' = $80 (fast unsign)
514   022B 21 01 40                LD      HL, YMPORT1     ; HL' point to YMPORT1
515   022E D9                      EXX
516   022F             
517   022F             wait_nullwav
518   022F 2A 24 01                LD      HL, (NULLWAVADR)
519   0232 7C                      LD      A, H
520   0233 B5                      OR      L
521   0234 CA 2F 02                JP      Z, wait_nullwav ; wait for null wav address being initialised
522   0237 2A 26 01                LD      HL, (NULLWAVLEN)
523   023A 7C                      LD      A, H
524   023B B5                      OR      L
525   023C CA 2F 02                JP      Z, wait_nullwav ; wait for null wav len being initialised
526   023F             
527   023F                         stopChannel             ; stop channel
527   023F 2A 24 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
527   0242 22 14 01    >            LD      (IWAVADR), HL           ;                   ' 16
527   0245 2A 26 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
527   0248 22 16 01    >            LD      (IWAVLEN), HL           ;                   ' 16
527   024B 21 02 01    >            LD      HL, STATUS              ;                   ' 10
527   024E CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
527   0250 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
527   0253 CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
528   0255             
529   0255 3E 80                   LD      A, STATREADY
530   0257 32 02 01                LD      (STATUS), A     ; driver ready
531   025A             
532   025A             main_loop
533   025A             
534   025A             ; channel 0
535   025A             ; ---------
536   025A             
537   025A             ; $00-$03
538   025A                         handlePlayCommandWhilePlay4 ;                       ' 440   | 440 (4*110)
538   025A D9          >            EXX                     ;                           ' 4
538   025B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   025C 82          >            ADD     D               ; unsign                    ' 4
538   025D 0C          >            INC     C               ; increment with looping    ' 4
538   025E 77          >            LD      (HL), A         ; play sample               ' 7
538   025F D9          >            EXX                     ;                           ' 4
538   0260 78          >            LD      A, B                    ;                   ' 4     |
538   0261 B7          >            OR      A                       ;                   ' 4     | 18
538   0262 CA A7 02    >            JP      Z, .end_wait            ;                   ' 10    |
538   0265 FD 23       >            INC     IY
538   0267 00          >            NOP
538   0268 00          >            NOP
538   0269 00          >            NOP
538   026A 00          >            NOP
538   026B 00          >            NOP
538   026C 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   026D FE 01       >            CP      A, 1                    ;                   ' 7     |
538   026F CA A7 02    >            JP      Z, .end_wait            ;                   ' 10    |
538   0272 3E 02       >            LD      A, w            ; 7
538   0274 3D          >            DEC     A               ; 4
538   0275 C2 74 02    >            JP      NZ, .loop       ; 10
538   0278 00          >            NOP
538   0279 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   027A FE 02       >            CP      A, 2                    ;                   ' 7     |
538   027C CA A7 02    >            JP      Z, .end_wait            ;                   ' 10    |
538   027F FD 23       >            INC     IY
538   0281 00          >            NOP
538   0282 00          >            NOP
538   0283 00          >            NOP
538   0284 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   0285 FE 03       >            CP      A, 3                    ;                   ' 7     |
538   0287 CA A7 02    >            JP      Z, .end_wait            ;                   ' 10    |
538   028A 00          >            NOP
538   028B 00          >            NOP
538   028C 00          >            NOP
538   028D 00          >            NOP
538   028E 00          >            NOP
538   028F 00          >            NOP
538   0290 00          >            NOP
538   0291 00          >            NOP
538   0292 00          >            NOP
538   0293 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   0294 FE 04       >            CP      A, 4                    ;                   ' 7     |
538   0296 CA A7 02    >            JP      Z, .end_wait            ;                   ' 10    |
538   0299 3E 06       >            LD      A, w            ; 7
538   029B 3D          >            DEC     A               ; 4
538   029C C2 9B 02    >            JP      NZ, .loop       ; 10
538   029F 00          >            NOP
538   02A0 00          >            NOP
538   02A1 00          >            NOP
538   02A2 00          >            NOP
538   02A3 00          >            NOP
538   02A4 F6 00       >            OR      $0
538   02A6 00          >            NOP
538   02A7 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
538   02AA CB 46       >            BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
538   02AC C2 BF 03    >            JP      NZ, .do_command     ;                       ' 10    |
538   02AF FD 23       >            INC     IY
538   02B1 00          >            NOP
538   02B2 00          >            NOP
538   02B3 00          >            NOP
538   02B4 00          >            NOP
538   02B5 00          >            NOP
538   02B6 D9          >            EXX                     ;                           ' 4
538   02B7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   02B8 82          >            ADD     D               ; unsign                    ' 4
538   02B9 0C          >            INC     C               ; increment with looping    ' 4
538   02BA 77          >            LD      (HL), A         ; play sample               ' 7
538   02BB D9          >            EXX                     ;                           ' 4
538   02BC 78          >            LD      A, B                    ;                   ' 4     |
538   02BD B7          >            OR      A                       ;                   ' 4     | 18
538   02BE CA 03 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   02C1 FD 23       >            INC     IY
538   02C3 00          >            NOP
538   02C4 00          >            NOP
538   02C5 00          >            NOP
538   02C6 00          >            NOP
538   02C7 00          >            NOP
538   02C8 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   02C9 FE 01       >            CP      A, 1                    ;                   ' 7     |
538   02CB CA 03 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   02CE 3E 02       >            LD      A, w            ; 7
538   02D0 3D          >            DEC     A               ; 4
538   02D1 C2 D0 02    >            JP      NZ, .loop       ; 10
538   02D4 00          >            NOP
538   02D5 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   02D6 FE 02       >            CP      A, 2                    ;                   ' 7     |
538   02D8 CA 03 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   02DB FD 23       >            INC     IY
538   02DD 00          >            NOP
538   02DE 00          >            NOP
538   02DF 00          >            NOP
538   02E0 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   02E1 FE 03       >            CP      A, 3                    ;                   ' 7     |
538   02E3 CA 03 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   02E6 00          >            NOP
538   02E7 00          >            NOP
538   02E8 00          >            NOP
538   02E9 00          >            NOP
538   02EA 00          >            NOP
538   02EB 00          >            NOP
538   02EC 00          >            NOP
538   02ED 00          >            NOP
538   02EE 00          >            NOP
538   02EF 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   02F0 FE 04       >            CP      A, 4                    ;                   ' 7     |
538   02F2 CA 03 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   02F5 3E 06       >            LD      A, w            ; 7
538   02F7 3D          >            DEC     A               ; 4
538   02F8 C2 F7 02    >            JP      NZ, .loop       ; 10
538   02FB 00          >            NOP
538   02FC 00          >            NOP
538   02FD 00          >            NOP
538   02FE 00          >            NOP
538   02FF 00          >            NOP
538   0300 F6 00       >            OR      $0
538   0302 00          >            NOP
538   0303 3E 03       >            LD      A, w            ; 7
538   0305 3D          >            DEC     A               ; 4
538   0306 C2 05 03    >            JP      NZ, .loop       ; 10
538   0309 ED 5F       >            LD      A, R
538   030B 00          >            NOP
538   030C D9          >            EXX                     ;                           ' 4
538   030D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   030E 82          >            ADD     D               ; unsign                    ' 4
538   030F 0C          >            INC     C               ; increment with looping    ' 4
538   0310 77          >            LD      (HL), A         ; play sample               ' 7
538   0311 D9          >            EXX                     ;                           ' 4
538   0312 78          >            LD      A, B                    ;                   ' 4     |
538   0313 B7          >            OR      A                       ;                   ' 4     | 18
538   0314 CA 59 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   0317 FD 23       >            INC     IY
538   0319 00          >            NOP
538   031A 00          >            NOP
538   031B 00          >            NOP
538   031C 00          >            NOP
538   031D 00          >            NOP
538   031E 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   031F FE 01       >            CP      A, 1                    ;                   ' 7     |
538   0321 CA 59 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   0324 3E 02       >            LD      A, w            ; 7
538   0326 3D          >            DEC     A               ; 4
538   0327 C2 26 03    >            JP      NZ, .loop       ; 10
538   032A 00          >            NOP
538   032B 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   032C FE 02       >            CP      A, 2                    ;                   ' 7     |
538   032E CA 59 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   0331 FD 23       >            INC     IY
538   0333 00          >            NOP
538   0334 00          >            NOP
538   0335 00          >            NOP
538   0336 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   0337 FE 03       >            CP      A, 3                    ;                   ' 7     |
538   0339 CA 59 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   033C 00          >            NOP
538   033D 00          >            NOP
538   033E 00          >            NOP
538   033F 00          >            NOP
538   0340 00          >            NOP
538   0341 00          >            NOP
538   0342 00          >            NOP
538   0343 00          >            NOP
538   0344 00          >            NOP
538   0345 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   0346 FE 04       >            CP      A, 4                    ;                   ' 7     |
538   0348 CA 59 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   034B 3E 06       >            LD      A, w            ; 7
538   034D 3D          >            DEC     A               ; 4
538   034E C2 4D 03    >            JP      NZ, .loop       ; 10
538   0351 00          >            NOP
538   0352 00          >            NOP
538   0353 00          >            NOP
538   0354 00          >            NOP
538   0355 00          >            NOP
538   0356 F6 00       >            OR      $0
538   0358 00          >            NOP
538   0359 3E 03       >            LD      A, w            ; 7
538   035B 3D          >            DEC     A               ; 4
538   035C C2 5B 03    >            JP      NZ, .loop       ; 10
538   035F ED 5F       >            LD      A, R
538   0361 00          >            NOP
538   0362 D9          >            EXX                     ;                           ' 4
538   0363 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   0364 82          >            ADD     D               ; unsign                    ' 4
538   0365 0C          >            INC     C               ; increment with looping    ' 4
538   0366 77          >            LD      (HL), A         ; play sample               ' 7
538   0367 D9          >            EXX                     ;                           ' 4
538   0368 78          >            LD      A, B                    ;                   ' 4     |
538   0369 B7          >            OR      A                       ;                   ' 4     | 18
538   036A CA AF 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   036D FD 23       >            INC     IY
538   036F 00          >            NOP
538   0370 00          >            NOP
538   0371 00          >            NOP
538   0372 00          >            NOP
538   0373 00          >            NOP
538   0374 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   0375 FE 01       >            CP      A, 1                    ;                   ' 7     |
538   0377 CA AF 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   037A 3E 02       >            LD      A, w            ; 7
538   037C 3D          >            DEC     A               ; 4
538   037D C2 7C 03    >            JP      NZ, .loop       ; 10
538   0380 00          >            NOP
538   0381 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   0382 FE 02       >            CP      A, 2                    ;                   ' 7     |
538   0384 CA AF 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   0387 FD 23       >            INC     IY
538   0389 00          >            NOP
538   038A 00          >            NOP
538   038B 00          >            NOP
538   038C 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   038D FE 03       >            CP      A, 3                    ;                   ' 7     |
538   038F CA AF 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   0392 00          >            NOP
538   0393 00          >            NOP
538   0394 00          >            NOP
538   0395 00          >            NOP
538   0396 00          >            NOP
538   0397 00          >            NOP
538   0398 00          >            NOP
538   0399 00          >            NOP
538   039A 00          >            NOP
538   039B 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   039C FE 04       >            CP      A, 4                    ;                   ' 7     |
538   039E CA AF 03    >            JP      Z, .end_wait            ;                   ' 10    |
538   03A1 3E 06       >            LD      A, w            ; 7
538   03A3 3D          >            DEC     A               ; 4
538   03A4 C2 A3 03    >            JP      NZ, .loop       ; 10
538   03A7 00          >            NOP
538   03A8 00          >            NOP
538   03A9 00          >            NOP
538   03AA 00          >            NOP
538   03AB 00          >            NOP
538   03AC F6 00       >            OR      $0
538   03AE 00          >            NOP
538   03AF 00          >            NOP
538   03B0 00          >            NOP
538   03B1 00          >            NOP
538   03B2 00          >            NOP
538   03B3 00          >            NOP
538   03B4 00          >            NOP
538   03B5 00          >            NOP
538   03B6 00          >            NOP
538   03B7 00          >            NOP
538   03B8 00          >            NOP
538   03B9 00          >            NOP
538   03BA 00          >            NOP
538   03BB 00          >            NOP
538   03BC C3 D4 04    >            JP      .end            ;                           ' 10    |
538   03BF 21 00 01    >            LD      HL, COMMAND             ;                   ' 10
538   03C2 CB 86       >            RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
538   03C4 00          >            NOP
538   03C5 D9          >            EXX                     ;                           ' 4
538   03C6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   03C7 82          >            ADD     D               ; unsign                    ' 4
538   03C8 0C          >            INC     C               ; increment with looping    ' 4
538   03C9 77          >            LD      (HL), A         ; play sample               ' 7
538   03CA D9          >            EXX                     ;                           ' 4
538   03CB 78          >            LD      A, B                    ;                   ' 4     |
538   03CC B7          >            OR      A                       ;                   ' 4     | 18
538   03CD CA 12 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   03D0 FD 23       >            INC     IY
538   03D2 00          >            NOP
538   03D3 00          >            NOP
538   03D4 00          >            NOP
538   03D5 00          >            NOP
538   03D6 00          >            NOP
538   03D7 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   03D8 FE 01       >            CP      A, 1                    ;                   ' 7     |
538   03DA CA 12 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   03DD 3E 02       >            LD      A, w            ; 7
538   03DF 3D          >            DEC     A               ; 4
538   03E0 C2 DF 03    >            JP      NZ, .loop       ; 10
538   03E3 00          >            NOP
538   03E4 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   03E5 FE 02       >            CP      A, 2                    ;                   ' 7     |
538   03E7 CA 12 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   03EA FD 23       >            INC     IY
538   03EC 00          >            NOP
538   03ED 00          >            NOP
538   03EE 00          >            NOP
538   03EF 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   03F0 FE 03       >            CP      A, 3                    ;                   ' 7     |
538   03F2 CA 12 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   03F5 00          >            NOP
538   03F6 00          >            NOP
538   03F7 00          >            NOP
538   03F8 00          >            NOP
538   03F9 00          >            NOP
538   03FA 00          >            NOP
538   03FB 00          >            NOP
538   03FC 00          >            NOP
538   03FD 00          >            NOP
538   03FE 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   03FF FE 04       >            CP      A, 4                    ;                   ' 7     |
538   0401 CA 12 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   0404 3E 06       >            LD      A, w            ; 7
538   0406 3D          >            DEC     A               ; 4
538   0407 C2 06 04    >            JP      NZ, .loop       ; 10
538   040A 00          >            NOP
538   040B 00          >            NOP
538   040C 00          >            NOP
538   040D 00          >            NOP
538   040E 00          >            NOP
538   040F F6 00       >            OR      $0
538   0411 00          >            NOP
538   0412 2A 04 01    >            LD      HL, (WAVADR)            ;                   ' 16
538   0415 22 14 01    >            LD      (IWAVADR), HL           ;                   ' 16
538   0418 2A 06 01    >            LD      HL, (WAVLEN)            ;                   ' 16
538   041B 22 16 01    >            LD      (IWAVLEN), HL           ;                   ' 16
538   041E D9          >            EXX                     ;                           ' 4
538   041F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   0420 82          >            ADD     D               ; unsign                    ' 4
538   0421 0C          >            INC     C               ; increment with looping    ' 4
538   0422 77          >            LD      (HL), A         ; play sample               ' 7
538   0423 D9          >            EXX                     ;                           ' 4
538   0424 78          >            LD      A, B                    ;                   ' 4     |
538   0425 B7          >            OR      A                       ;                   ' 4     | 18
538   0426 CA 6B 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   0429 FD 23       >            INC     IY
538   042B 00          >            NOP
538   042C 00          >            NOP
538   042D 00          >            NOP
538   042E 00          >            NOP
538   042F 00          >            NOP
538   0430 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   0431 FE 01       >            CP      A, 1                    ;                   ' 7     |
538   0433 CA 6B 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   0436 3E 02       >            LD      A, w            ; 7
538   0438 3D          >            DEC     A               ; 4
538   0439 C2 38 04    >            JP      NZ, .loop       ; 10
538   043C 00          >            NOP
538   043D 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   043E FE 02       >            CP      A, 2                    ;                   ' 7     |
538   0440 CA 6B 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   0443 FD 23       >            INC     IY
538   0445 00          >            NOP
538   0446 00          >            NOP
538   0447 00          >            NOP
538   0448 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   0449 FE 03       >            CP      A, 3                    ;                   ' 7     |
538   044B CA 6B 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   044E 00          >            NOP
538   044F 00          >            NOP
538   0450 00          >            NOP
538   0451 00          >            NOP
538   0452 00          >            NOP
538   0453 00          >            NOP
538   0454 00          >            NOP
538   0455 00          >            NOP
538   0456 00          >            NOP
538   0457 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   0458 FE 04       >            CP      A, 4                    ;                   ' 7     |
538   045A CA 6B 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   045D 3E 06       >            LD      A, w            ; 7
538   045F 3D          >            DEC     A               ; 4
538   0460 C2 5F 04    >            JP      NZ, .loop       ; 10
538   0463 00          >            NOP
538   0464 00          >            NOP
538   0465 00          >            NOP
538   0466 00          >            NOP
538   0467 00          >            NOP
538   0468 F6 00       >            OR      $0
538   046A 00          >            NOP
538   046B 21 02 01    >            LD      HL, STATUS              ;                   ' 10
538   046E CB C6       >            SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
538   0470 3A 08 01    >            LD      A, (RATE)       ; get rate value            ' 13    |
538   0473 47          >            LD      B, A            ; store in B                ' 4     | 59 (328)
538   0474 3A 0A 01    >            LD      A, (PAN)        ; set pan value             ' 13    |
538   0477 4F          >            LD      C, A            ; store in C                ' 4     |
538   0478 D9          >            EXX                     ;                           ' 4
538   0479 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
538   047A 82          >            ADD     D               ; unsign                    ' 4
538   047B 0C          >            INC     C               ; increment with looping    ' 4
538   047C 77          >            LD      (HL), A         ; play sample               ' 7
538   047D D9          >            EXX                     ;                           ' 4
538   047E 78          >            LD      A, B                    ;                   ' 4     |
538   047F B7          >            OR      A                       ;                   ' 4     | 18
538   0480 CA C5 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   0483 FD 23       >            INC     IY
538   0485 00          >            NOP
538   0486 00          >            NOP
538   0487 00          >            NOP
538   0488 00          >            NOP
538   0489 00          >            NOP
538   048A 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
538   048B FE 01       >            CP      A, 1                    ;                   ' 7     |
538   048D CA C5 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   0490 3E 02       >            LD      A, w            ; 7
538   0492 3D          >            DEC     A               ; 4
538   0493 C2 92 04    >            JP      NZ, .loop       ; 10
538   0496 00          >            NOP
538   0497 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
538   0498 FE 02       >            CP      A, 2                    ;                   ' 7     |
538   049A CA C5 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   049D FD 23       >            INC     IY
538   049F 00          >            NOP
538   04A0 00          >            NOP
538   04A1 00          >            NOP
538   04A2 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
538   04A3 FE 03       >            CP      A, 3                    ;                   ' 7     |
538   04A5 CA C5 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   04A8 00          >            NOP
538   04A9 00          >            NOP
538   04AA 00          >            NOP
538   04AB 00          >            NOP
538   04AC 00          >            NOP
538   04AD 00          >            NOP
538   04AE 00          >            NOP
538   04AF 00          >            NOP
538   04B0 00          >            NOP
538   04B1 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
538   04B2 FE 04       >            CP      A, 4                    ;                   ' 7     |
538   04B4 CA C5 04    >            JP      Z, .end_wait            ;                   ' 10    |
538   04B7 3E 06       >            LD      A, w            ; 7
538   04B9 3D          >            DEC     A               ; 4
538   04BA C2 B9 04    >            JP      NZ, .loop       ; 10
538   04BD 00          >            NOP
538   04BE 00          >            NOP
538   04BF 00          >            NOP
538   04C0 00          >            NOP
538   04C1 00          >            NOP
538   04C2 F6 00       >            OR      $0
538   04C4 00          >            NOP
538   04C5 21 02 40    >            LD      HL, YMPORT2     ; prepare panning           ' 10    |
538   04C8 36 B6       >            LD      (HL), $B6       ;                           ' 10    |
538   04CA 2C          >            INC     L               ;                           ' 4     |
538   04CB F6 00       >            OR      $0
538   04CD 00          >            NOP
538   04CE 71          >            LD      (HL), C         ; set pan value             ' 7     | 64 (440)
538   04CF 2D          >            DEC     L               ;                           ' 4     |
538   04D0 2D          >            DEC     L               ;                           ' 4     |
538   04D1 2D          >            DEC     L               ;                           ' 4     |
538   04D2 36 2A       >            LD      (HL), $2A       ; prepare DAC out           ' 10    |
539   04D4             
540   04D4             ; $04-$07
541   04D4                         prepareChannelWhilePlay4    ;                       ' 402   |
541   04D4 D9          >            EXX                     ;                           ' 4
541   04D5 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
541   04D6 82          >            ADD     D               ; unsign                    ' 4
541   04D7 0C          >            INC     C               ; increment with looping    ' 4
541   04D8 77          >            LD      (HL), A         ; play sample               ' 7
541   04D9 D9          >            EXX                     ;                           ' 4
541   04DA 78          >            LD      A, B                    ;                   ' 4     |
541   04DB B7          >            OR      A                       ;                   ' 4     | 18
541   04DC CA 21 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   04DF FD 23       >            INC     IY
541   04E1 00          >            NOP
541   04E2 00          >            NOP
541   04E3 00          >            NOP
541   04E4 00          >            NOP
541   04E5 00          >            NOP
541   04E6 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
541   04E7 FE 01       >            CP      A, 1                    ;                   ' 7     |
541   04E9 CA 21 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   04EC 3E 02       >            LD      A, w            ; 7
541   04EE 3D          >            DEC     A               ; 4
541   04EF C2 EE 04    >            JP      NZ, .loop       ; 10
541   04F2 00          >            NOP
541   04F3 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
541   04F4 FE 02       >            CP      A, 2                    ;                   ' 7     |
541   04F6 CA 21 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   04F9 FD 23       >            INC     IY
541   04FB 00          >            NOP
541   04FC 00          >            NOP
541   04FD 00          >            NOP
541   04FE 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
541   04FF FE 03       >            CP      A, 3                    ;                   ' 7     |
541   0501 CA 21 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   0504 00          >            NOP
541   0505 00          >            NOP
541   0506 00          >            NOP
541   0507 00          >            NOP
541   0508 00          >            NOP
541   0509 00          >            NOP
541   050A 00          >            NOP
541   050B 00          >            NOP
541   050C 00          >            NOP
541   050D 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
541   050E FE 04       >            CP      A, 4                    ;                   ' 7     |
541   0510 CA 21 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   0513 3E 06       >            LD      A, w            ; 7
541   0515 3D          >            DEC     A               ; 4
541   0516 C2 15 05    >            JP      NZ, .loop       ; 10
541   0519 00          >            NOP
541   051A 00          >            NOP
541   051B 00          >            NOP
541   051C 00          >            NOP
541   051D 00          >            NOP
541   051E F6 00       >            OR      $0
541   0520 00          >            NOP
541   0521 21 14 01    >            LD      HL, IWAVADR     ; point to sample adr       ' 10    |
541   0524 5E          >            LD      E, (HL)         ; E = bit 8-15              ' 7     |
541   0525 7B          >            LD      A, E            ; A = bit 8-15              ' 4     |
541   0526 2C          >            INC     L               ;                           ' 4     | 40 (88)
541   0527 17          >            RLA                     ; C flag = bit 15           ' 4     |
541   0528 7E          >            LD      A, (HL)         ; A = bit 16-23             ' 7     |
541   0529 17          >            RLA                     ; A = bit 15-22             ' 4     |
541   052A 21 00 60    >            LD      HL, BANKREG     ; HL = BANKREG              ' 10    |
541   052D 08          >            EX      AF, AF'         ; save A                    ' 4     | 22 (110)
541   052E 00          >            NOP
541   052F 00          >            NOP
541   0530 D9          >            EXX                     ;                           ' 4
541   0531 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
541   0532 82          >            ADD     D               ; unsign                    ' 4
541   0533 0C          >            INC     C               ; increment with looping    ' 4
541   0534 77          >            LD      (HL), A         ; play sample               ' 7
541   0535 D9          >            EXX                     ;                           ' 4
541   0536 78          >            LD      A, B                    ;                   ' 4     |
541   0537 B7          >            OR      A                       ;                   ' 4     | 18
541   0538 CA 7D 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   053B FD 23       >            INC     IY
541   053D 00          >            NOP
541   053E 00          >            NOP
541   053F 00          >            NOP
541   0540 00          >            NOP
541   0541 00          >            NOP
541   0542 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
541   0543 FE 01       >            CP      A, 1                    ;                   ' 7     |
541   0545 CA 7D 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   0548 3E 02       >            LD      A, w            ; 7
541   054A 3D          >            DEC     A               ; 4
541   054B C2 4A 05    >            JP      NZ, .loop       ; 10
541   054E 00          >            NOP
541   054F 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
541   0550 FE 02       >            CP      A, 2                    ;                   ' 7     |
541   0552 CA 7D 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   0555 FD 23       >            INC     IY
541   0557 00          >            NOP
541   0558 00          >            NOP
541   0559 00          >            NOP
541   055A 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
541   055B FE 03       >            CP      A, 3                    ;                   ' 7     |
541   055D CA 7D 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   0560 00          >            NOP
541   0561 00          >            NOP
541   0562 00          >            NOP
541   0563 00          >            NOP
541   0564 00          >            NOP
541   0565 00          >            NOP
541   0566 00          >            NOP
541   0567 00          >            NOP
541   0568 00          >            NOP
541   0569 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
541   056A FE 04       >            CP      A, 4                    ;                   ' 7     |
541   056C CA 7D 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   056F 3E 06       >            LD      A, w            ; 7
541   0571 3D          >            DEC     A               ; 4
541   0572 C2 71 05    >            JP      NZ, .loop       ; 10
541   0575 00          >            NOP
541   0576 00          >            NOP
541   0577 00          >            NOP
541   0578 00          >            NOP
541   0579 00          >            NOP
541   057A F6 00       >            OR      $0
541   057C 00          >            NOP
541   057D 08          >            EX      AF, AF'         ; restore A                 ' 4     |
541   057E 77          >            LD      (HL), A         ; #1 (bit 15)               ' 7     |
541   057F 1F          >            RRA                     ;                           ' 4     |
541   0580 77          >            LD      (HL), A         ; #2 (bit 16)               ' 7     |
541   0581 1F          >            RRA                     ;                           ' 4     |
541   0582 77          >            LD      (HL), A         ; #3 (bit 17)               ' 7     | 63 (221)
541   0583 1F          >            RRA                     ;                           ' 4     |
541   0584 77          >            LD      (HL), A         ; #4 (bit 18)               ' 7     |
541   0585 1F          >            RRA                     ;                           ' 4     |
541   0586 77          >            LD      (HL), A         ; #5 (bit 19)               ' 7     |
541   0587 08          >            EX      AF, AF'         ; save A                    ' 4     |
541   0588 00          >            NOP
541   0589 D9          >            EXX                     ;                           ' 4
541   058A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
541   058B 82          >            ADD     D               ; unsign                    ' 4
541   058C 0C          >            INC     C               ; increment with looping    ' 4
541   058D 77          >            LD      (HL), A         ; play sample               ' 7
541   058E D9          >            EXX                     ;                           ' 4
541   058F 78          >            LD      A, B                    ;                   ' 4     |
541   0590 B7          >            OR      A                       ;                   ' 4     | 18
541   0591 CA D6 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   0594 FD 23       >            INC     IY
541   0596 00          >            NOP
541   0597 00          >            NOP
541   0598 00          >            NOP
541   0599 00          >            NOP
541   059A 00          >            NOP
541   059B 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
541   059C FE 01       >            CP      A, 1                    ;                   ' 7     |
541   059E CA D6 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   05A1 3E 02       >            LD      A, w            ; 7
541   05A3 3D          >            DEC     A               ; 4
541   05A4 C2 A3 05    >            JP      NZ, .loop       ; 10
541   05A7 00          >            NOP
541   05A8 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
541   05A9 FE 02       >            CP      A, 2                    ;                   ' 7     |
541   05AB CA D6 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   05AE FD 23       >            INC     IY
541   05B0 00          >            NOP
541   05B1 00          >            NOP
541   05B2 00          >            NOP
541   05B3 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
541   05B4 FE 03       >            CP      A, 3                    ;                   ' 7     |
541   05B6 CA D6 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   05B9 00          >            NOP
541   05BA 00          >            NOP
541   05BB 00          >            NOP
541   05BC 00          >            NOP
541   05BD 00          >            NOP
541   05BE 00          >            NOP
541   05BF 00          >            NOP
541   05C0 00          >            NOP
541   05C1 00          >            NOP
541   05C2 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
541   05C3 FE 04       >            CP      A, 4                    ;                   ' 7     |
541   05C5 CA D6 05    >            JP      Z, .end_wait            ;                   ' 10    |
541   05C8 3E 06       >            LD      A, w            ; 7
541   05CA 3D          >            DEC     A               ; 4
541   05CB C2 CA 05    >            JP      NZ, .loop       ; 10
541   05CE 00          >            NOP
541   05CF 00          >            NOP
541   05D0 00          >            NOP
541   05D1 00          >            NOP
541   05D2 00          >            NOP
541   05D3 F6 00       >            OR      $0
541   05D5 00          >            NOP
541   05D6 08          >            EX      AF, AF'         ; restore A                 ' 4     |
541   05D7 1F          >            RRA                     ;                           ' 4     |
541   05D8 77          >            LD      (HL), A         ; #6 (bit 20)               ' 7     |
541   05D9 1F          >            RRA                     ;                           ' 4     | 40 (309)
541   05DA 77          >            LD      (HL), A         ; #7 (bit 21)               ' 7     |
541   05DB 75          >            LD      (HL), L         ; #8 (bit 22 = 0)           ' 7     |
541   05DC 75          >            LD      (HL), L         ; #9 (bit 23 = 0)           ' 7     |
541   05DD 7B          >            LD      A, E            ; A = bit 8-15              ' 4     |
541   05DE F6 80       >            OR      $80             ; A = $80 | bit 8-14        ' 7     |
541   05E0 67          >            LD      H, A            ;                           ' 4     | 23 (332)
541   05E1 AF          >            XOR     A               ;                           ' 4     |
541   05E2 6F          >            LD      L, A            ; L = $00                   ' 4     |
541   05E3 D9          >            EXX                     ;                           ' 4
541   05E4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
541   05E5 82          >            ADD     D               ; unsign                    ' 4
541   05E6 0C          >            INC     C               ; increment with looping    ' 4
541   05E7 77          >            LD      (HL), A         ; play sample               ' 7
541   05E8 D9          >            EXX                     ;                           ' 4
541   05E9 78          >            LD      A, B                    ;                   ' 4     |
541   05EA B7          >            OR      A                       ;                   ' 4     | 18
541   05EB CA 30 06    >            JP      Z, .end_wait            ;                   ' 10    |
541   05EE FD 23       >            INC     IY
541   05F0 00          >            NOP
541   05F1 00          >            NOP
541   05F2 00          >            NOP
541   05F3 00          >            NOP
541   05F4 00          >            NOP
541   05F5 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
541   05F6 FE 01       >            CP      A, 1                    ;                   ' 7     |
541   05F8 CA 30 06    >            JP      Z, .end_wait            ;                   ' 10    |
541   05FB 3E 02       >            LD      A, w            ; 7
541   05FD 3D          >            DEC     A               ; 4
541   05FE C2 FD 05    >            JP      NZ, .loop       ; 10
541   0601 00          >            NOP
541   0602 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
541   0603 FE 02       >            CP      A, 2                    ;                   ' 7     |
541   0605 CA 30 06    >            JP      Z, .end_wait            ;                   ' 10    |
541   0608 FD 23       >            INC     IY
541   060A 00          >            NOP
541   060B 00          >            NOP
541   060C 00          >            NOP
541   060D 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
541   060E FE 03       >            CP      A, 3                    ;                   ' 7     |
541   0610 CA 30 06    >            JP      Z, .end_wait            ;                   ' 10    |
541   0613 00          >            NOP
541   0614 00          >            NOP
541   0615 00          >            NOP
541   0616 00          >            NOP
541   0617 00          >            NOP
541   0618 00          >            NOP
541   0619 00          >            NOP
541   061A 00          >            NOP
541   061B 00          >            NOP
541   061C 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
541   061D FE 04       >            CP      A, 4                    ;                   ' 7     |
541   061F CA 30 06    >            JP      Z, .end_wait            ;                   ' 10    |
541   0622 3E 06       >            LD      A, w            ; 7
541   0624 3D          >            DEC     A               ; 4
541   0625 C2 24 06    >            JP      NZ, .loop       ; 10
541   0628 00          >            NOP
541   0629 00          >            NOP
541   062A 00          >            NOP
541   062B 00          >            NOP
541   062C 00          >            NOP
541   062D F6 00       >            OR      $0
541   062F 00          >            NOP
541   0630 F9          >            LD      SP, HL          ; SP = sample src           ' 6     | 22 (402)
541   0631 2A 28 01    >            LD      HL, (WRITEBUF)  ;                           ' 16    |
542   0634 0E 80                   LD      C, 128              ; prepare loop counter  ' 7     | 440 (4*110)
543   0636                         wait31                      ;                       ' 4     |
543   0636 3E 01       >            LD      A, w            ; 7
543   0638 3D          >            DEC     A               ; 4
543   0639 C2 38 06    >            JP      NZ, .loop       ; 10
543   063C FD 23       >            INC     IY
544   063E             
545   063E             ; $08-$87
546   063E             loop_ch
547   063E                         sampleOutputAndWait         ;                       ' 48    |
547   063E D9          >            EXX                     ;                           ' 4
547   063F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
547   0640 82          >            ADD     D               ; unsign                    ' 4
547   0641 0C          >            INC     C               ; increment with looping    ' 4
547   0642 77          >            LD      (HL), A         ; play sample               ' 7
547   0643 D9          >            EXX                     ;                           ' 4
547   0644 78          >            LD      A, B                    ;                   ' 4     |
547   0645 B7          >            OR      A                       ;                   ' 4     | 18
547   0646 CA 8B 06    >            JP      Z, .end_wait            ;                   ' 10    |
547   0649 FD 23       >            INC     IY
547   064B 00          >            NOP
547   064C 00          >            NOP
547   064D 00          >            NOP
547   064E 00          >            NOP
547   064F 00          >            NOP
547   0650 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
547   0651 FE 01       >            CP      A, 1                    ;                   ' 7     |
547   0653 CA 8B 06    >            JP      Z, .end_wait            ;                   ' 10    |
547   0656 3E 02       >            LD      A, w            ; 7
547   0658 3D          >            DEC     A               ; 4
547   0659 C2 58 06    >            JP      NZ, .loop       ; 10
547   065C 00          >            NOP
547   065D 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
547   065E FE 02       >            CP      A, 2                    ;                   ' 7     |
547   0660 CA 8B 06    >            JP      Z, .end_wait            ;                   ' 10    |
547   0663 FD 23       >            INC     IY
547   0665 00          >            NOP
547   0666 00          >            NOP
547   0667 00          >            NOP
547   0668 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
547   0669 FE 03       >            CP      A, 3                    ;                   ' 7     |
547   066B CA 8B 06    >            JP      Z, .end_wait            ;                   ' 10    |
547   066E 00          >            NOP
547   066F 00          >            NOP
547   0670 00          >            NOP
547   0671 00          >            NOP
547   0672 00          >            NOP
547   0673 00          >            NOP
547   0674 00          >            NOP
547   0675 00          >            NOP
547   0676 00          >            NOP
547   0677 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
547   0678 FE 04       >            CP      A, 4                    ;                   ' 7     |
547   067A CA 8B 06    >            JP      Z, .end_wait            ;                   ' 10    |
547   067D 3E 06       >            LD      A, w            ; 7
547   067F 3D          >            DEC     A               ; 4
547   0680 C2 7F 06    >            JP      NZ, .loop       ; 10
547   0683 00          >            NOP
547   0684 00          >            NOP
547   0685 00          >            NOP
547   0686 00          >            NOP
547   0687 00          >            NOP
547   0688 F6 00       >            OR      $0
547   068A 00          >            NOP
548   068B                         readAndWrite2               ; process 2  samples    ' 34    |
548   068B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+2 (rom access latency)
548   068C 73          >            LD      (HL), E         ;                           ' 7
548   068D 2C          >            INC     L               ;                           ' 4
548   068E 72          >            LD      (HL), D         ;                           ' 7
548   068F 2C          >            INC     L               ;                           ' 4
549   0690                         wait14                      ; synchro               ' 14    | 110
549   0690 FD 23       >            INC     IY
549   0692 00          >            NOP
550   0693 0D                      DEC     C                   ;                       ' 4     |
551   0694 C2 3E 06                JP      NZ, loop_ch         ;                       ' 10    |
552   0697             
553   0697             ; $88-$89
554   0697                         updateChannelDataWhilePlay2 ;                       ' 180   | 220 (2*110)
554   0697 D9          >            EXX                     ;                           ' 4
554   0698 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
554   0699 82          >            ADD     D               ; unsign                    ' 4
554   069A 0C          >            INC     C               ; increment with looping    ' 4
554   069B 77          >            LD      (HL), A         ; play sample               ' 7
554   069C D9          >            EXX                     ;                           ' 4
554   069D 78          >            LD      A, B                    ;                   ' 4     |
554   069E B7          >            OR      A                       ;                   ' 4     | 18
554   069F CA E4 06    >            JP      Z, .end_wait            ;                   ' 10    |
554   06A2 FD 23       >            INC     IY
554   06A4 00          >            NOP
554   06A5 00          >            NOP
554   06A6 00          >            NOP
554   06A7 00          >            NOP
554   06A8 00          >            NOP
554   06A9 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
554   06AA FE 01       >            CP      A, 1                    ;                   ' 7     |
554   06AC CA E4 06    >            JP      Z, .end_wait            ;                   ' 10    |
554   06AF 3E 02       >            LD      A, w            ; 7
554   06B1 3D          >            DEC     A               ; 4
554   06B2 C2 B1 06    >            JP      NZ, .loop       ; 10
554   06B5 00          >            NOP
554   06B6 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
554   06B7 FE 02       >            CP      A, 2                    ;                   ' 7     |
554   06B9 CA E4 06    >            JP      Z, .end_wait            ;                   ' 10    |
554   06BC FD 23       >            INC     IY
554   06BE 00          >            NOP
554   06BF 00          >            NOP
554   06C0 00          >            NOP
554   06C1 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
554   06C2 FE 03       >            CP      A, 3                    ;                   ' 7     |
554   06C4 CA E4 06    >            JP      Z, .end_wait            ;                   ' 10    |
554   06C7 00          >            NOP
554   06C8 00          >            NOP
554   06C9 00          >            NOP
554   06CA 00          >            NOP
554   06CB 00          >            NOP
554   06CC 00          >            NOP
554   06CD 00          >            NOP
554   06CE 00          >            NOP
554   06CF 00          >            NOP
554   06D0 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
554   06D1 FE 04       >            CP      A, 4                    ;                   ' 7     |
554   06D3 CA E4 06    >            JP      Z, .end_wait            ;                   ' 10    |
554   06D6 3E 06       >            LD      A, w            ; 7
554   06D8 3D          >            DEC     A               ; 4
554   06D9 C2 D8 06    >            JP      NZ, .loop       ; 10
554   06DC 00          >            NOP
554   06DD 00          >            NOP
554   06DE 00          >            NOP
554   06DF 00          >            NOP
554   06E0 00          >            NOP
554   06E1 F6 00       >            OR      $0
554   06E3 00          >            NOP
554   06E4 2A 14 01    >            LD      HL, (IWAVADR)   ; increment address         ' 16    |
554   06E7 23          >            INC     HL              ;                           ' 6     | 38 (86)
554   06E8 22 14 01    >            LD      (IWAVADR), HL   ;                           ' 16    |
554   06EB 2A 16 01    >            LD      HL, (IWAVLEN)   ; decrement lenght          ' 16    | 24 (110)
554   06EE 00          >            NOP
554   06EF 00          >            NOP
554   06F0 D9          >            EXX                     ;                           ' 4
554   06F1 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
554   06F2 82          >            ADD     D               ; unsign                    ' 4
554   06F3 0C          >            INC     C               ; increment with looping    ' 4
554   06F4 77          >            LD      (HL), A         ; play sample               ' 7
554   06F5 D9          >            EXX                     ;                           ' 4
554   06F6 78          >            LD      A, B                    ;                   ' 4     |
554   06F7 B7          >            OR      A                       ;                   ' 4     | 18
554   06F8 CA 3D 07    >            JP      Z, .end_wait            ;                   ' 10    |
554   06FB FD 23       >            INC     IY
554   06FD 00          >            NOP
554   06FE 00          >            NOP
554   06FF 00          >            NOP
554   0700 00          >            NOP
554   0701 00          >            NOP
554   0702 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
554   0703 FE 01       >            CP      A, 1                    ;                   ' 7     |
554   0705 CA 3D 07    >            JP      Z, .end_wait            ;                   ' 10    |
554   0708 3E 02       >            LD      A, w            ; 7
554   070A 3D          >            DEC     A               ; 4
554   070B C2 0A 07    >            JP      NZ, .loop       ; 10
554   070E 00          >            NOP
554   070F 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
554   0710 FE 02       >            CP      A, 2                    ;                   ' 7     |
554   0712 CA 3D 07    >            JP      Z, .end_wait            ;                   ' 10    |
554   0715 FD 23       >            INC     IY
554   0717 00          >            NOP
554   0718 00          >            NOP
554   0719 00          >            NOP
554   071A 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
554   071B FE 03       >            CP      A, 3                    ;                   ' 7     |
554   071D CA 3D 07    >            JP      Z, .end_wait            ;                   ' 10    |
554   0720 00          >            NOP
554   0721 00          >            NOP
554   0722 00          >            NOP
554   0723 00          >            NOP
554   0724 00          >            NOP
554   0725 00          >            NOP
554   0726 00          >            NOP
554   0727 00          >            NOP
554   0728 00          >            NOP
554   0729 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
554   072A FE 04       >            CP      A, 4                    ;                   ' 7     |
554   072C CA 3D 07    >            JP      Z, .end_wait            ;                   ' 10    |
554   072F 3E 06       >            LD      A, w            ; 7
554   0731 3D          >            DEC     A               ; 4
554   0732 C2 31 07    >            JP      NZ, .loop       ; 10
554   0735 00          >            NOP
554   0736 00          >            NOP
554   0737 00          >            NOP
554   0738 00          >            NOP
554   0739 00          >            NOP
554   073A F6 00       >            OR      $0
554   073C 00          >            NOP
554   073D 2B          >            DEC     HL              ;                           ' 6     | 22
554   073E 22 16 01    >            LD      (IWAVLEN), HL   ;                           ' 16    | (180)
555   0741                         wait40                      ;                       ' 40    |
555   0741 3E 01       >            LD      A, w            ; 7
555   0743 3D          >            DEC     A               ; 4
555   0744 C2 43 07    >            JP      NZ, .loop       ; 10
555   0747 00          >            NOP
555   0748 00          >            NOP
555   0749 00          >            NOP
555   074A F6 00       >            OR      $0
556   074C             
557   074C             ; $8A-$8D
558   074C                         checkChannelEndWhilePlay4   ;                       ' 430   | 440 (4*110)
558   074C D9          >            EXX                     ;                           ' 4
558   074D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   074E 82          >            ADD     D               ; unsign                    ' 4
558   074F 0C          >            INC     C               ; increment with looping    ' 4
558   0750 77          >            LD      (HL), A         ; play sample               ' 7
558   0751 D9          >            EXX                     ;                           ' 4
558   0752 78          >            LD      A, B                    ;                   ' 4     |
558   0753 B7          >            OR      A                       ;                   ' 4     | 18
558   0754 CA 99 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   0757 FD 23       >            INC     IY
558   0759 00          >            NOP
558   075A 00          >            NOP
558   075B 00          >            NOP
558   075C 00          >            NOP
558   075D 00          >            NOP
558   075E 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   075F FE 01       >            CP      A, 1                    ;                   ' 7     |
558   0761 CA 99 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   0764 3E 02       >            LD      A, w            ; 7
558   0766 3D          >            DEC     A               ; 4
558   0767 C2 66 07    >            JP      NZ, .loop       ; 10
558   076A 00          >            NOP
558   076B 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   076C FE 02       >            CP      A, 2                    ;                   ' 7     |
558   076E CA 99 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   0771 FD 23       >            INC     IY
558   0773 00          >            NOP
558   0774 00          >            NOP
558   0775 00          >            NOP
558   0776 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   0777 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   0779 CA 99 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   077C 00          >            NOP
558   077D 00          >            NOP
558   077E 00          >            NOP
558   077F 00          >            NOP
558   0780 00          >            NOP
558   0781 00          >            NOP
558   0782 00          >            NOP
558   0783 00          >            NOP
558   0784 00          >            NOP
558   0785 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   0786 FE 04       >            CP      A, 4                    ;                   ' 7     |
558   0788 CA 99 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   078B 3E 06       >            LD      A, w            ; 7
558   078D 3D          >            DEC     A               ; 4
558   078E C2 8D 07    >            JP      NZ, .loop       ; 10
558   0791 00          >            NOP
558   0792 00          >            NOP
558   0793 00          >            NOP
558   0794 00          >            NOP
558   0795 00          >            NOP
558   0796 F6 00       >            OR      $0
558   0798 00          >            NOP
558   0799 2A 16 01    >            LD      HL, (IWAVLEN)   ; get sample lenght         ' 16    |
558   079C 7C          >            LD      A, H            ;                           ' 4     | 34 (82)
558   079D B5          >            OR      L               ;                           ' 4     |
558   079E CA AD 08    >            JP      Z, .done        ; sample done ?             ' 10    |
558   07A1 3E 01       >            LD      A, w            ; 7
558   07A3 3D          >            DEC     A               ; 4
558   07A4 C2 A3 07    >            JP      NZ, .loop       ; 10
558   07A7 F6 00       >            OR      $0
558   07A9 D9          >            EXX                     ;                           ' 4
558   07AA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   07AB 82          >            ADD     D               ; unsign                    ' 4
558   07AC 0C          >            INC     C               ; increment with looping    ' 4
558   07AD 77          >            LD      (HL), A         ; play sample               ' 7
558   07AE D9          >            EXX                     ;                           ' 4
558   07AF 78          >            LD      A, B                    ;                   ' 4     |
558   07B0 B7          >            OR      A                       ;                   ' 4     | 18
558   07B1 CA F6 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   07B4 FD 23       >            INC     IY
558   07B6 00          >            NOP
558   07B7 00          >            NOP
558   07B8 00          >            NOP
558   07B9 00          >            NOP
558   07BA 00          >            NOP
558   07BB 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   07BC FE 01       >            CP      A, 1                    ;                   ' 7     |
558   07BE CA F6 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   07C1 3E 02       >            LD      A, w            ; 7
558   07C3 3D          >            DEC     A               ; 4
558   07C4 C2 C3 07    >            JP      NZ, .loop       ; 10
558   07C7 00          >            NOP
558   07C8 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   07C9 FE 02       >            CP      A, 2                    ;                   ' 7     |
558   07CB CA F6 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   07CE FD 23       >            INC     IY
558   07D0 00          >            NOP
558   07D1 00          >            NOP
558   07D2 00          >            NOP
558   07D3 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   07D4 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   07D6 CA F6 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   07D9 00          >            NOP
558   07DA 00          >            NOP
558   07DB 00          >            NOP
558   07DC 00          >            NOP
558   07DD 00          >            NOP
558   07DE 00          >            NOP
558   07DF 00          >            NOP
558   07E0 00          >            NOP
558   07E1 00          >            NOP
558   07E2 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   07E3 FE 04       >            CP      A, 4                    ;                   ' 7     |
558   07E5 CA F6 07    >            JP      Z, .end_wait            ;                   ' 10    |
558   07E8 3E 06       >            LD      A, w            ; 7
558   07EA 3D          >            DEC     A               ; 4
558   07EB C2 EA 07    >            JP      NZ, .loop       ; 10
558   07EE 00          >            NOP
558   07EF 00          >            NOP
558   07F0 00          >            NOP
558   07F1 00          >            NOP
558   07F2 00          >            NOP
558   07F3 F6 00       >            OR      $0
558   07F5 00          >            NOP
558   07F6 3E 03       >            LD      A, w            ; 7
558   07F8 3D          >            DEC     A               ; 4
558   07F9 C2 F8 07    >            JP      NZ, .loop       ; 10
558   07FC ED 5F       >            LD      A, R
558   07FE 00          >            NOP
558   07FF D9          >            EXX                     ;                           ' 4
558   0800 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   0801 82          >            ADD     D               ; unsign                    ' 4
558   0802 0C          >            INC     C               ; increment with looping    ' 4
558   0803 77          >            LD      (HL), A         ; play sample               ' 7
558   0804 D9          >            EXX                     ;                           ' 4
558   0805 78          >            LD      A, B                    ;                   ' 4     |
558   0806 B7          >            OR      A                       ;                   ' 4     | 18
558   0807 CA 4C 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   080A FD 23       >            INC     IY
558   080C 00          >            NOP
558   080D 00          >            NOP
558   080E 00          >            NOP
558   080F 00          >            NOP
558   0810 00          >            NOP
558   0811 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   0812 FE 01       >            CP      A, 1                    ;                   ' 7     |
558   0814 CA 4C 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   0817 3E 02       >            LD      A, w            ; 7
558   0819 3D          >            DEC     A               ; 4
558   081A C2 19 08    >            JP      NZ, .loop       ; 10
558   081D 00          >            NOP
558   081E 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   081F FE 02       >            CP      A, 2                    ;                   ' 7     |
558   0821 CA 4C 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   0824 FD 23       >            INC     IY
558   0826 00          >            NOP
558   0827 00          >            NOP
558   0828 00          >            NOP
558   0829 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   082A FE 03       >            CP      A, 3                    ;                   ' 7     |
558   082C CA 4C 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   082F 00          >            NOP
558   0830 00          >            NOP
558   0831 00          >            NOP
558   0832 00          >            NOP
558   0833 00          >            NOP
558   0834 00          >            NOP
558   0835 00          >            NOP
558   0836 00          >            NOP
558   0837 00          >            NOP
558   0838 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   0839 FE 04       >            CP      A, 4                    ;                   ' 7     |
558   083B CA 4C 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   083E 3E 06       >            LD      A, w            ; 7
558   0840 3D          >            DEC     A               ; 4
558   0841 C2 40 08    >            JP      NZ, .loop       ; 10
558   0844 00          >            NOP
558   0845 00          >            NOP
558   0846 00          >            NOP
558   0847 00          >            NOP
558   0848 00          >            NOP
558   0849 F6 00       >            OR      $0
558   084B 00          >            NOP
558   084C 3E 03       >            LD      A, w            ; 7
558   084E 3D          >            DEC     A               ; 4
558   084F C2 4E 08    >            JP      NZ, .loop       ; 10
558   0852 ED 5F       >            LD      A, R
558   0854 00          >            NOP
558   0855 D9          >            EXX                     ;                           ' 4
558   0856 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   0857 82          >            ADD     D               ; unsign                    ' 4
558   0858 0C          >            INC     C               ; increment with looping    ' 4
558   0859 77          >            LD      (HL), A         ; play sample               ' 7
558   085A D9          >            EXX                     ;                           ' 4
558   085B 78          >            LD      A, B                    ;                   ' 4     |
558   085C B7          >            OR      A                       ;                   ' 4     | 18
558   085D CA A2 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   0860 FD 23       >            INC     IY
558   0862 00          >            NOP
558   0863 00          >            NOP
558   0864 00          >            NOP
558   0865 00          >            NOP
558   0866 00          >            NOP
558   0867 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   0868 FE 01       >            CP      A, 1                    ;                   ' 7     |
558   086A CA A2 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   086D 3E 02       >            LD      A, w            ; 7
558   086F 3D          >            DEC     A               ; 4
558   0870 C2 6F 08    >            JP      NZ, .loop       ; 10
558   0873 00          >            NOP
558   0874 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   0875 FE 02       >            CP      A, 2                    ;                   ' 7     |
558   0877 CA A2 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   087A FD 23       >            INC     IY
558   087C 00          >            NOP
558   087D 00          >            NOP
558   087E 00          >            NOP
558   087F 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   0880 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   0882 CA A2 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   0885 00          >            NOP
558   0886 00          >            NOP
558   0887 00          >            NOP
558   0888 00          >            NOP
558   0889 00          >            NOP
558   088A 00          >            NOP
558   088B 00          >            NOP
558   088C 00          >            NOP
558   088D 00          >            NOP
558   088E 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   088F FE 04       >            CP      A, 4                    ;                   ' 7     |
558   0891 CA A2 08    >            JP      Z, .end_wait            ;                   ' 10    |
558   0894 3E 06       >            LD      A, w            ; 7
558   0896 3D          >            DEC     A               ; 4
558   0897 C2 96 08    >            JP      NZ, .loop       ; 10
558   089A 00          >            NOP
558   089B 00          >            NOP
558   089C 00          >            NOP
558   089D 00          >            NOP
558   089E 00          >            NOP
558   089F F6 00       >            OR      $0
558   08A1 00          >            NOP
558   08A2 3E 02       >            LD      A, w            ; 7
558   08A4 3D          >            DEC     A               ; 4
558   08A5 C2 A4 08    >            JP      NZ, .loop       ; 10
558   08A8 F6 00       >            OR      $0
558   08AA C3 7C 0A    >            JP      .end            ;                           ' 10    |
558   08AD 3E 01       >            LD      A, w            ; 7
558   08AF 3D          >            DEC     A               ; 4
558   08B0 C2 AF 08    >            JP      NZ, .loop       ; 10
558   08B3 F6 00       >            OR      $0
558   08B5 D9          >            EXX                     ;                           ' 4
558   08B6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   08B7 82          >            ADD     D               ; unsign                    ' 4
558   08B8 0C          >            INC     C               ; increment with looping    ' 4
558   08B9 77          >            LD      (HL), A         ; play sample               ' 7
558   08BA D9          >            EXX                     ;                           ' 4
558   08BB 78          >            LD      A, B                    ;                   ' 4     |
558   08BC B7          >            OR      A                       ;                   ' 4     | 18
558   08BD CA 02 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   08C0 FD 23       >            INC     IY
558   08C2 00          >            NOP
558   08C3 00          >            NOP
558   08C4 00          >            NOP
558   08C5 00          >            NOP
558   08C6 00          >            NOP
558   08C7 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   08C8 FE 01       >            CP      A, 1                    ;                   ' 7     |
558   08CA CA 02 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   08CD 3E 02       >            LD      A, w            ; 7
558   08CF 3D          >            DEC     A               ; 4
558   08D0 C2 CF 08    >            JP      NZ, .loop       ; 10
558   08D3 00          >            NOP
558   08D4 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   08D5 FE 02       >            CP      A, 2                    ;                   ' 7     |
558   08D7 CA 02 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   08DA FD 23       >            INC     IY
558   08DC 00          >            NOP
558   08DD 00          >            NOP
558   08DE 00          >            NOP
558   08DF 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   08E0 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   08E2 CA 02 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   08E5 00          >            NOP
558   08E6 00          >            NOP
558   08E7 00          >            NOP
558   08E8 00          >            NOP
558   08E9 00          >            NOP
558   08EA 00          >            NOP
558   08EB 00          >            NOP
558   08EC 00          >            NOP
558   08ED 00          >            NOP
558   08EE 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   08EF FE 04       >            CP      A, 4                    ;                   ' 7     |
558   08F1 CA 02 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   08F4 3E 06       >            LD      A, w            ; 7
558   08F6 3D          >            DEC     A               ; 4
558   08F7 C2 F6 08    >            JP      NZ, .loop       ; 10
558   08FA 00          >            NOP
558   08FB 00          >            NOP
558   08FC 00          >            NOP
558   08FD 00          >            NOP
558   08FE 00          >            NOP
558   08FF F6 00       >            OR      $0
558   0901 00          >            NOP
558   0902 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
558   0905 CB 46       >            BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
558   0907 CA C5 09    >            JP      Z, .stop        ;                           ' 10    |
558   090A FD 23       >            INC     IY
558   090C 00          >            NOP
558   090D 00          >            NOP
558   090E 00          >            NOP
558   090F 00          >            NOP
558   0910 00          >            NOP
558   0911 D9          >            EXX                     ;                           ' 4
558   0912 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   0913 82          >            ADD     D               ; unsign                    ' 4
558   0914 0C          >            INC     C               ; increment with looping    ' 4
558   0915 77          >            LD      (HL), A         ; play sample               ' 7
558   0916 D9          >            EXX                     ;                           ' 4
558   0917 78          >            LD      A, B                    ;                   ' 4     |
558   0918 B7          >            OR      A                       ;                   ' 4     | 18
558   0919 CA 5E 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   091C FD 23       >            INC     IY
558   091E 00          >            NOP
558   091F 00          >            NOP
558   0920 00          >            NOP
558   0921 00          >            NOP
558   0922 00          >            NOP
558   0923 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   0924 FE 01       >            CP      A, 1                    ;                   ' 7     |
558   0926 CA 5E 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   0929 3E 02       >            LD      A, w            ; 7
558   092B 3D          >            DEC     A               ; 4
558   092C C2 2B 09    >            JP      NZ, .loop       ; 10
558   092F 00          >            NOP
558   0930 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   0931 FE 02       >            CP      A, 2                    ;                   ' 7     |
558   0933 CA 5E 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   0936 FD 23       >            INC     IY
558   0938 00          >            NOP
558   0939 00          >            NOP
558   093A 00          >            NOP
558   093B 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   093C FE 03       >            CP      A, 3                    ;                   ' 7     |
558   093E CA 5E 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   0941 00          >            NOP
558   0942 00          >            NOP
558   0943 00          >            NOP
558   0944 00          >            NOP
558   0945 00          >            NOP
558   0946 00          >            NOP
558   0947 00          >            NOP
558   0948 00          >            NOP
558   0949 00          >            NOP
558   094A 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   094B FE 04       >            CP      A, 4                    ;                   ' 7     |
558   094D CA 5E 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   0950 3E 06       >            LD      A, w            ; 7
558   0952 3D          >            DEC     A               ; 4
558   0953 C2 52 09    >            JP      NZ, .loop       ; 10
558   0956 00          >            NOP
558   0957 00          >            NOP
558   0958 00          >            NOP
558   0959 00          >            NOP
558   095A 00          >            NOP
558   095B F6 00       >            OR      $0
558   095D 00          >            NOP
558   095E 2A 04 01    >            LD      HL, (WAVADR)            ;                   ' 16
558   0961 22 14 01    >            LD      (IWAVADR), HL           ;                   ' 16
558   0964 2A 06 01    >            LD      HL, (WAVLEN)            ;                   ' 16
558   0967 22 16 01    >            LD      (IWAVLEN), HL           ;                   ' 16
558   096A D9          >            EXX                     ;                           ' 4
558   096B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   096C 82          >            ADD     D               ; unsign                    ' 4
558   096D 0C          >            INC     C               ; increment with looping    ' 4
558   096E 77          >            LD      (HL), A         ; play sample               ' 7
558   096F D9          >            EXX                     ;                           ' 4
558   0970 78          >            LD      A, B                    ;                   ' 4     |
558   0971 B7          >            OR      A                       ;                   ' 4     | 18
558   0972 CA B7 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   0975 FD 23       >            INC     IY
558   0977 00          >            NOP
558   0978 00          >            NOP
558   0979 00          >            NOP
558   097A 00          >            NOP
558   097B 00          >            NOP
558   097C 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   097D FE 01       >            CP      A, 1                    ;                   ' 7     |
558   097F CA B7 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   0982 3E 02       >            LD      A, w            ; 7
558   0984 3D          >            DEC     A               ; 4
558   0985 C2 84 09    >            JP      NZ, .loop       ; 10
558   0988 00          >            NOP
558   0989 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   098A FE 02       >            CP      A, 2                    ;                   ' 7     |
558   098C CA B7 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   098F FD 23       >            INC     IY
558   0991 00          >            NOP
558   0992 00          >            NOP
558   0993 00          >            NOP
558   0994 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   0995 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   0997 CA B7 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   099A 00          >            NOP
558   099B 00          >            NOP
558   099C 00          >            NOP
558   099D 00          >            NOP
558   099E 00          >            NOP
558   099F 00          >            NOP
558   09A0 00          >            NOP
558   09A1 00          >            NOP
558   09A2 00          >            NOP
558   09A3 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   09A4 FE 04       >            CP      A, 4                    ;                   ' 7     |
558   09A6 CA B7 09    >            JP      Z, .end_wait            ;                   ' 10    |
558   09A9 3E 06       >            LD      A, w            ; 7
558   09AB 3D          >            DEC     A               ; 4
558   09AC C2 AB 09    >            JP      NZ, .loop       ; 10
558   09AF 00          >            NOP
558   09B0 00          >            NOP
558   09B1 00          >            NOP
558   09B2 00          >            NOP
558   09B3 00          >            NOP
558   09B4 F6 00       >            OR      $0
558   09B6 00          >            NOP
558   09B7 3E 01       >            LD      A, w            ; 7
558   09B9 3D          >            DEC     A               ; 4
558   09BA C2 B9 09    >            JP      NZ, .loop       ; 10
558   09BD 00          >            NOP
558   09BE 00          >            NOP
558   09BF 00          >            NOP
558   09C0 F6 00       >            OR      $0
558   09C2 C3 7C 0A    >            JP      .end            ;                           ' 10    |
558   09C5 FD 23       >            INC     IY
558   09C7 00          >            NOP
558   09C8 00          >            NOP
558   09C9 00          >            NOP
558   09CA 00          >            NOP
558   09CB 00          >            NOP
558   09CC D9          >            EXX                     ;                           ' 4
558   09CD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   09CE 82          >            ADD     D               ; unsign                    ' 4
558   09CF 0C          >            INC     C               ; increment with looping    ' 4
558   09D0 77          >            LD      (HL), A         ; play sample               ' 7
558   09D1 D9          >            EXX                     ;                           ' 4
558   09D2 78          >            LD      A, B                    ;                   ' 4     |
558   09D3 B7          >            OR      A                       ;                   ' 4     | 18
558   09D4 CA 19 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   09D7 FD 23       >            INC     IY
558   09D9 00          >            NOP
558   09DA 00          >            NOP
558   09DB 00          >            NOP
558   09DC 00          >            NOP
558   09DD 00          >            NOP
558   09DE 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   09DF FE 01       >            CP      A, 1                    ;                   ' 7     |
558   09E1 CA 19 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   09E4 3E 02       >            LD      A, w            ; 7
558   09E6 3D          >            DEC     A               ; 4
558   09E7 C2 E6 09    >            JP      NZ, .loop       ; 10
558   09EA 00          >            NOP
558   09EB 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   09EC FE 02       >            CP      A, 2                    ;                   ' 7     |
558   09EE CA 19 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   09F1 FD 23       >            INC     IY
558   09F3 00          >            NOP
558   09F4 00          >            NOP
558   09F5 00          >            NOP
558   09F6 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   09F7 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   09F9 CA 19 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   09FC 00          >            NOP
558   09FD 00          >            NOP
558   09FE 00          >            NOP
558   09FF 00          >            NOP
558   0A00 00          >            NOP
558   0A01 00          >            NOP
558   0A02 00          >            NOP
558   0A03 00          >            NOP
558   0A04 00          >            NOP
558   0A05 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   0A06 FE 04       >            CP      A, 4                    ;                   ' 7     |
558   0A08 CA 19 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   0A0B 3E 06       >            LD      A, w            ; 7
558   0A0D 3D          >            DEC     A               ; 4
558   0A0E C2 0D 0A    >            JP      NZ, .loop       ; 10
558   0A11 00          >            NOP
558   0A12 00          >            NOP
558   0A13 00          >            NOP
558   0A14 00          >            NOP
558   0A15 00          >            NOP
558   0A16 F6 00       >            OR      $0
558   0A18 00          >            NOP
558   0A19 2A 24 01    >            LD      HL, (NULLWAVADR)        ;                   ' 16
558   0A1C 22 14 01    >            LD      (IWAVADR), HL           ;                   ' 16
558   0A1F 2A 26 01    >            LD      HL, (NULLWAVLEN)        ;                   ' 16
558   0A22 22 16 01    >            LD      (IWAVLEN), HL           ;                   ' 16
558   0A25 D9          >            EXX                     ;                           ' 4
558   0A26 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
558   0A27 82          >            ADD     D               ; unsign                    ' 4
558   0A28 0C          >            INC     C               ; increment with looping    ' 4
558   0A29 77          >            LD      (HL), A         ; play sample               ' 7
558   0A2A D9          >            EXX                     ;                           ' 4
558   0A2B 78          >            LD      A, B                    ;                   ' 4     |
558   0A2C B7          >            OR      A                       ;                   ' 4     | 18
558   0A2D CA 72 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   0A30 FD 23       >            INC     IY
558   0A32 00          >            NOP
558   0A33 00          >            NOP
558   0A34 00          >            NOP
558   0A35 00          >            NOP
558   0A36 00          >            NOP
558   0A37 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
558   0A38 FE 01       >            CP      A, 1                    ;                   ' 7     |
558   0A3A CA 72 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   0A3D 3E 02       >            LD      A, w            ; 7
558   0A3F 3D          >            DEC     A               ; 4
558   0A40 C2 3F 0A    >            JP      NZ, .loop       ; 10
558   0A43 00          >            NOP
558   0A44 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
558   0A45 FE 02       >            CP      A, 2                    ;                   ' 7     |
558   0A47 CA 72 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   0A4A FD 23       >            INC     IY
558   0A4C 00          >            NOP
558   0A4D 00          >            NOP
558   0A4E 00          >            NOP
558   0A4F 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
558   0A50 FE 03       >            CP      A, 3                    ;                   ' 7     |
558   0A52 CA 72 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   0A55 00          >            NOP
558   0A56 00          >            NOP
558   0A57 00          >            NOP
558   0A58 00          >            NOP
558   0A59 00          >            NOP
558   0A5A 00          >            NOP
558   0A5B 00          >            NOP
558   0A5C 00          >            NOP
558   0A5D 00          >            NOP
558   0A5E 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
558   0A5F FE 04       >            CP      A, 4                    ;                   ' 7     |
558   0A61 CA 72 0A    >            JP      Z, .end_wait            ;                   ' 10    |
558   0A64 3E 06       >            LD      A, w            ; 7
558   0A66 3D          >            DEC     A               ; 4
558   0A67 C2 66 0A    >            JP      NZ, .loop       ; 10
558   0A6A 00          >            NOP
558   0A6B 00          >            NOP
558   0A6C 00          >            NOP
558   0A6D 00          >            NOP
558   0A6E 00          >            NOP
558   0A6F F6 00       >            OR      $0
558   0A71 00          >            NOP
558   0A72 21 02 01    >            LD      HL, STATUS              ;                   ' 10
558   0A75 CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
558   0A77 21 03 01    >            LD      HL, STATUS+1            ;                   ' 10
558   0A7A CB 86       >            RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
559   0A7C                         wait10                      ;                       ' 10    |
559   0A7C FD 23       >            INC     IY
560   0A7E             
561   0A7E             
562   0A7E             ; free time here
563   0A7E             ; --------------
564   0A7E             
565   0A7E             ; $8E
566   0A7E                         sampleOutputAndWait         ;                       ' 48    |
566   0A7E D9          >            EXX                     ;                           ' 4
566   0A7F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
566   0A80 82          >            ADD     D               ; unsign                    ' 4
566   0A81 0C          >            INC     C               ; increment with looping    ' 4
566   0A82 77          >            LD      (HL), A         ; play sample               ' 7
566   0A83 D9          >            EXX                     ;                           ' 4
566   0A84 78          >            LD      A, B                    ;                   ' 4     |
566   0A85 B7          >            OR      A                       ;                   ' 4     | 18
566   0A86 CA CB 0A    >            JP      Z, .end_wait            ;                   ' 10    |
566   0A89 FD 23       >            INC     IY
566   0A8B 00          >            NOP
566   0A8C 00          >            NOP
566   0A8D 00          >            NOP
566   0A8E 00          >            NOP
566   0A8F 00          >            NOP
566   0A90 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
566   0A91 FE 01       >            CP      A, 1                    ;                   ' 7     |
566   0A93 CA CB 0A    >            JP      Z, .end_wait            ;                   ' 10    |
566   0A96 3E 02       >            LD      A, w            ; 7
566   0A98 3D          >            DEC     A               ; 4
566   0A99 C2 98 0A    >            JP      NZ, .loop       ; 10
566   0A9C 00          >            NOP
566   0A9D 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
566   0A9E FE 02       >            CP      A, 2                    ;                   ' 7     |
566   0AA0 CA CB 0A    >            JP      Z, .end_wait            ;                   ' 10    |
566   0AA3 FD 23       >            INC     IY
566   0AA5 00          >            NOP
566   0AA6 00          >            NOP
566   0AA7 00          >            NOP
566   0AA8 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
566   0AA9 FE 03       >            CP      A, 3                    ;                   ' 7     |
566   0AAB CA CB 0A    >            JP      Z, .end_wait            ;                   ' 10    |
566   0AAE 00          >            NOP
566   0AAF 00          >            NOP
566   0AB0 00          >            NOP
566   0AB1 00          >            NOP
566   0AB2 00          >            NOP
566   0AB3 00          >            NOP
566   0AB4 00          >            NOP
566   0AB5 00          >            NOP
566   0AB6 00          >            NOP
566   0AB7 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
566   0AB8 FE 04       >            CP      A, 4                    ;                   ' 7     |
566   0ABA CA CB 0A    >            JP      Z, .end_wait            ;                   ' 10    |
566   0ABD 3E 06       >            LD      A, w            ; 7
566   0ABF 3D          >            DEC     A               ; 4
566   0AC0 C2 BF 0A    >            JP      NZ, .loop       ; 10
566   0AC3 00          >            NOP
566   0AC4 00          >            NOP
566   0AC5 00          >            NOP
566   0AC6 00          >            NOP
566   0AC7 00          >            NOP
566   0AC8 F6 00       >            OR      $0
566   0ACA 00          >            NOP
567   0ACB 0E 6F                   LD      C, $6F              ; prepare loop          ' 7     | 110
568   0ACD                         wait55                      ;                       ' 55    |
568   0ACD 3E 02       >            LD      A, w            ; 7
568   0ACF 3D          >            DEC     A               ; 4
568   0AD0 C2 CF 0A    >            JP      NZ, .loop       ; 10
568   0AD3 00          >            NOP
568   0AD4 00          >            NOP
568   0AD5 00          >            NOP
568   0AD6 00          >            NOP
568   0AD7 00          >            NOP
569   0AD8             
570   0AD8             ; $8F-FD
571   0AD8             loop_freetime
572   0AD8                         sampleOutputAndWait         ;                       ' 48    |
572   0AD8 D9          >            EXX                     ;                           ' 4
572   0AD9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
572   0ADA 82          >            ADD     D               ; unsign                    ' 4
572   0ADB 0C          >            INC     C               ; increment with looping    ' 4
572   0ADC 77          >            LD      (HL), A         ; play sample               ' 7
572   0ADD D9          >            EXX                     ;                           ' 4
572   0ADE 78          >            LD      A, B                    ;                   ' 4     |
572   0ADF B7          >            OR      A                       ;                   ' 4     | 18
572   0AE0 CA 25 0B    >            JP      Z, .end_wait            ;                   ' 10    |
572   0AE3 FD 23       >            INC     IY
572   0AE5 00          >            NOP
572   0AE6 00          >            NOP
572   0AE7 00          >            NOP
572   0AE8 00          >            NOP
572   0AE9 00          >            NOP
572   0AEA 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
572   0AEB FE 01       >            CP      A, 1                    ;                   ' 7     |
572   0AED CA 25 0B    >            JP      Z, .end_wait            ;                   ' 10    |
572   0AF0 3E 02       >            LD      A, w            ; 7
572   0AF2 3D          >            DEC     A               ; 4
572   0AF3 C2 F2 0A    >            JP      NZ, .loop       ; 10
572   0AF6 00          >            NOP
572   0AF7 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
572   0AF8 FE 02       >            CP      A, 2                    ;                   ' 7     |
572   0AFA CA 25 0B    >            JP      Z, .end_wait            ;                   ' 10    |
572   0AFD FD 23       >            INC     IY
572   0AFF 00          >            NOP
572   0B00 00          >            NOP
572   0B01 00          >            NOP
572   0B02 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
572   0B03 FE 03       >            CP      A, 3                    ;                   ' 7     |
572   0B05 CA 25 0B    >            JP      Z, .end_wait            ;                   ' 10    |
572   0B08 00          >            NOP
572   0B09 00          >            NOP
572   0B0A 00          >            NOP
572   0B0B 00          >            NOP
572   0B0C 00          >            NOP
572   0B0D 00          >            NOP
572   0B0E 00          >            NOP
572   0B0F 00          >            NOP
572   0B10 00          >            NOP
572   0B11 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
572   0B12 FE 04       >            CP      A, 4                    ;                   ' 7     |
572   0B14 CA 25 0B    >            JP      Z, .end_wait            ;                   ' 10    |
572   0B17 3E 06       >            LD      A, w            ; 7
572   0B19 3D          >            DEC     A               ; 4
572   0B1A C2 19 0B    >            JP      NZ, .loop       ; 10
572   0B1D 00          >            NOP
572   0B1E 00          >            NOP
572   0B1F 00          >            NOP
572   0B20 00          >            NOP
572   0B21 00          >            NOP
572   0B22 F6 00       >            OR      $0
572   0B24 00          >            NOP
573   0B25                         wait48                      ;                       ' 48    | 110
573   0B25 3E 01       >            LD      A, w            ; 7
573   0B27 3D          >            DEC     A               ; 4
573   0B28 C2 27 0B    >            JP      NZ, .loop       ; 10
573   0B2B 00          >            NOP
573   0B2C 00          >            NOP
573   0B2D 00          >            NOP
573   0B2E F6 00       >            OR      $0
573   0B30 00          >            NOP
573   0B31 00          >            NOP
574   0B32 0D                      DEC     C                   ;                       ' 4     |
575   0B33 C2 D8 0A                JP      NZ, loop_freetime   ;                       ' 10    |
576   0B36             
577   0B36             ; $FE-$FF
578   0B36                         swapBufferWhilePlay2        ;                       ' 174   |
578   0B36 D9          >            EXX                     ;                           ' 4
578   0B37 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
578   0B38 82          >            ADD     D               ; unsign                    ' 4
578   0B39 0C          >            INC     C               ; increment with looping    ' 4
578   0B3A 77          >            LD      (HL), A         ; play sample               ' 7
578   0B3B D9          >            EXX                     ;                           ' 4
578   0B3C 78          >            LD      A, B                    ;                   ' 4     |
578   0B3D B7          >            OR      A                       ;                   ' 4     | 18
578   0B3E CA 83 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0B41 FD 23       >            INC     IY
578   0B43 00          >            NOP
578   0B44 00          >            NOP
578   0B45 00          >            NOP
578   0B46 00          >            NOP
578   0B47 00          >            NOP
578   0B48 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
578   0B49 FE 01       >            CP      A, 1                    ;                   ' 7     |
578   0B4B CA 83 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0B4E 3E 02       >            LD      A, w            ; 7
578   0B50 3D          >            DEC     A               ; 4
578   0B51 C2 50 0B    >            JP      NZ, .loop       ; 10
578   0B54 00          >            NOP
578   0B55 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
578   0B56 FE 02       >            CP      A, 2                    ;                   ' 7     |
578   0B58 CA 83 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0B5B FD 23       >            INC     IY
578   0B5D 00          >            NOP
578   0B5E 00          >            NOP
578   0B5F 00          >            NOP
578   0B60 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
578   0B61 FE 03       >            CP      A, 3                    ;                   ' 7     |
578   0B63 CA 83 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0B66 00          >            NOP
578   0B67 00          >            NOP
578   0B68 00          >            NOP
578   0B69 00          >            NOP
578   0B6A 00          >            NOP
578   0B6B 00          >            NOP
578   0B6C 00          >            NOP
578   0B6D 00          >            NOP
578   0B6E 00          >            NOP
578   0B6F 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
578   0B70 FE 04       >            CP      A, 4                    ;                   ' 7     |
578   0B72 CA 83 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0B75 3E 06       >            LD      A, w            ; 7
578   0B77 3D          >            DEC     A               ; 4
578   0B78 C2 77 0B    >            JP      NZ, .loop       ; 10
578   0B7B 00          >            NOP
578   0B7C 00          >            NOP
578   0B7D 00          >            NOP
578   0B7E 00          >            NOP
578   0B7F 00          >            NOP
578   0B80 F6 00       >            OR      $0
578   0B82 00          >            NOP
578   0B83 2A 28 01    >            LD      HL, (WRITEBUF)  ;                           ' 16    |
578   0B86 ED 5B 2A 01 >            LD      DE, (READBUF)   ;                           ' 20    | 62 (110)
578   0B8A ED 53 28 01 >            LD      (WRITEBUF), DE  ;                           ' 20    |
578   0B8E 13          >            INC     DE
578   0B8F D9          >            EXX                     ;                           ' 4
578   0B90 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7
578   0B91 82          >            ADD     D               ; unsign                    ' 4
578   0B92 0C          >            INC     C               ; increment with looping    ' 4
578   0B93 77          >            LD      (HL), A         ; play sample               ' 7
578   0B94 D9          >            EXX                     ;                           ' 4
578   0B95 78          >            LD      A, B                    ;                   ' 4     |
578   0B96 B7          >            OR      A                       ;                   ' 4     | 18
578   0B97 CA DC 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0B9A FD 23       >            INC     IY
578   0B9C 00          >            NOP
578   0B9D 00          >            NOP
578   0B9E 00          >            NOP
578   0B9F 00          >            NOP
578   0BA0 00          >            NOP
578   0BA1 78          >            LD      A, B                    ;                   ' 4     | 51 (69)
578   0BA2 FE 01       >            CP      A, 1                    ;                   ' 7     |
578   0BA4 CA DC 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0BA7 3E 02       >            LD      A, w            ; 7
578   0BA9 3D          >            DEC     A               ; 4
578   0BAA C2 A9 0B    >            JP      NZ, .loop       ; 10
578   0BAD 00          >            NOP
578   0BAE 78          >            LD      A, B                    ;                   ' 4     | 60 (129)
578   0BAF FE 02       >            CP      A, 2                    ;                   ' 7     |
578   0BB1 CA DC 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0BB4 FD 23       >            INC     IY
578   0BB6 00          >            NOP
578   0BB7 00          >            NOP
578   0BB8 00          >            NOP
578   0BB9 78          >            LD      A, B                    ;                   ' 4     | 43 (172)
578   0BBA FE 03       >            CP      A, 3                    ;                   ' 7     |
578   0BBC CA DC 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0BBF 00          >            NOP
578   0BC0 00          >            NOP
578   0BC1 00          >            NOP
578   0BC2 00          >            NOP
578   0BC3 00          >            NOP
578   0BC4 00          >            NOP
578   0BC5 00          >            NOP
578   0BC6 00          >            NOP
578   0BC7 00          >            NOP
578   0BC8 78          >            LD      A, B                    ;                   ' 4     | 57 (229)
578   0BC9 FE 04       >            CP      A, 4                    ;                   ' 7     |
578   0BCB CA DC 0B    >            JP      Z, .end_wait            ;                   ' 10    |
578   0BCE 3E 06       >            LD      A, w            ; 7
578   0BD0 3D          >            DEC     A               ; 4
578   0BD1 C2 D0 0B    >            JP      NZ, .loop       ; 10
578   0BD4 00          >            NOP
578   0BD5 00          >            NOP
578   0BD6 00          >            NOP
578   0BD7 00          >            NOP
578   0BD8 00          >            NOP
578   0BD9 F6 00       >            OR      $0
578   0BDB 00          >            NOP
578   0BDC 22 2A 01    >            LD      (READBUF), HL   ;                           ' 16 (174)
579   0BDF D9                      EXX                         ;                       ' 4     |
580   0BE0 ED 4B 2A 01             LD      BC, (READBUF)       ; read buffer           ' 20    | 220
581   0BE4 D9                      EXX                         ;                       ' 4     |
582   0BE5                         wait8                       ;                       ' 8     |
582   0BE5 00          >            NOP
582   0BE6 00          >            NOP
583   0BE7 C3 5A 02                JP      main_loop           ;                       ' 10    |
584   0BEA             
585   0BEA             
586   0BEA             ; ##############################  functions  ################################
587   0BEA             
588   0BEA                         INCLUDE "z80_fct.i80"   ; basic functions
001+  0BEA             ; ########################### function #############################
002+  0BEA             
003+  0BEA             ; initDAC
004+  0BEA             ; -----------
005+  0BEA             ; HL <-  YMPORT0
006+  0BEA             ; DE <-  $2A80
007+  0BEA             ;
008+  0BEA             ; prepare DAC for output
009+  0BEA             
010+  0BEA             initDAC
011+  0BEA 11 80 2B                LD      DE, $2B80
012+  0BED CD F7 0B                CALL    writeYM0        ; enable DAC
013+  0BF0 11 80 2A                LD      DE, $2A80
014+  0BF3 CD F7 0B                CALL    writeYM0        ; DAC data to silent
015+  0BF6 C9                      RET
016+  0BF7             
017+  0BF7             ; writeYM0 / writeYM1
018+  0BF7             ; -------------------
019+  0BF7             ; D   -> address
020+  0BF7             ; E   -> value
021+  0BF7             ; HL <-  YMPORT0 / YMPORT2
022+  0BF7             ;
023+  0BF7             ; write to YM2612
024+  0BF7             
025+  0BF7             writeYM0
026+  0BF7 21 00 40                LD      HL, YMPORT0
027+  0BFA                         writeYM
027+  0BFA CB 7E       >            BIT     7, (HL)         ; test YM not busy
027+  0BFC 20 FC       >            JR      NZ, .wait0
027+  0BFE 72          >            LD      (HL), D         ; write address
027+  0BFF CB 7E       >            BIT     7, (HL)         ; test YM not busy
027+  0C01 20 FC       >            JR      NZ, .wait1
027+  0C03 2C          >            INC     L
027+  0C04 73          >            LD      (HL), E         ; write value
028+  0C05 C9                      RET
029+  0C06             writeYM1
030+  0C06 21 02 40                LD      HL, YMPORT2
031+  0C09                         writeYM
031+  0C09 CB 7E       >            BIT     7, (HL)         ; test YM not busy
031+  0C0B 20 FC       >            JR      NZ, .wait0
031+  0C0D 72          >            LD      (HL), D         ; write address
031+  0C0E CB 7E       >            BIT     7, (HL)         ; test YM not busy
031+  0C10 20 FC       >            JR      NZ, .wait1
031+  0C12 2C          >            INC     L
031+  0C13 73          >            LD      (HL), E         ; write value
032+  0C14 C9                      RET
033+  0C15             
589   0C15             
590   0C15             
591   0C15                         END
